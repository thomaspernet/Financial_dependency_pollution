{"GLOBAL": {"GITHUB": {"owner": "thomaspernet", "repo_name": "Financial_dependency_pollution"}, "DATABASE": "", "QUERIES_OUTPUT": "SQL_OUTPUT_ATHENA"}, "TABLES": {"CREATION": {"ALL_SCHEMA": [{"description": "Create Firms survey ASIF panel data from STATA", "schema": [{"Name": "firm", "Type": "string", "Comment": "firm ID"}, {"Name": "year", "Type": "string", "Comment": "balance sheet year"}, {"Name": "export", "Type": "int", "Comment": "Where: export delivery value"}, {"Name": "dq", "Type": "string", "Comment": "Province county code"}, {"Name": "name", "Type": "string", "Comment": "Corporate Name"}, {"Name": "town", "Type": "string", "Comment": "Township (town)"}, {"Name": "village", "Type": "string", "Comment": "Street (village), house number"}, {"Name": "street", "Type": "string", "Comment": "Street office"}, {"Name": "c15", "Type": "string", "Comment": "Community (neighborhood) and village committee"}, {"Name": "zip", "Type": "string", "Comment": "Zip code"}, {"Name": "product1_", "Type": "string", "Comment": "The main products (1)"}, {"Name": "c26", "Type": "string", "Comment": "The main products (2)"}, {"Name": "c27", "Type": "string", "Comment": "The main products (3)"}, {"Name": "cic", "Type": "string", "Comment": "Industry Code"}, {"Name": "type", "Type": "string", "Comment": "Registration Type"}, {"Name": "c44", "Type": "string", "Comment": "Holding case"}, {"Name": "c45", "Type": "string", "Comment": "Affiliation"}, {"Name": "setup", "Type": "string", "Comment": "year of creation"}, {"Name": "c47", "Type": "int", "Comment": "Opening (established) time - months"}, {"Name": "c60", "Type": "int", "Comment": "Code-scale enterprises"}, {"Name": "c61", "Type": "int", "Comment": "Light and heavy industrial codes"}, {"Name": "employ", "Type": "int", "Comment": "Employement"}, {"Name": "c69", "Type": "int", "Comment": "Industrial output (constant prices)"}, {"Name": "output", "Type": "int", "Comment": "Industrial output value (current prices)"}, {"Name": "new_product", "Type": "int", "Comment": "Where: New product output value"}, {"Name": "c74", "Type": "int", "Comment": "Industrial sales output value (current prices)"}, {"Name": "addval", "Type": "int", "Comment": "Value added"}, {"Name": "cuasset", "Type": "int", "Comment": "Current asset"}, {"Name": "c80", "Type": "int", "Comment": "Accounts Receivable"}, {"Name": "c81", "Type": "int", "Comment": "stock"}, {"Name": "c82", "Type": "int", "Comment": "Wherein: Finished"}, {"Name": "c83", "Type": "int", "Comment": "The average balance of current assets"}, {"Name": "c84", "Type": "int", "Comment": "Long-term investment"}, {"Name": "c85", "Type": "int", "Comment": "Total fixed assets (deprecated)"}, {"Name": "tofixed", "Type": "int", "Comment": "Total fixed assets (to use)"}, {"Name": "c87", "Type": "int", "Comment": "Where: the production and operation with"}, {"Name": "todepre", "Type": "int", "Comment": "total depreciation"}, {"Name": "cudepre", "Type": "int", "Comment": "current depreciation"}, {"Name": "netfixed", "Type": "int", "Comment": "net fixed asset"}, {"Name": "c91", "Type": "int", "Comment": "Intangible and Deferred"}, {"Name": "c92", "Type": "int", "Comment": "Intangible assets"}, {"Name": "toasset", "Type": "int", "Comment": "Total asset"}, {"Name": "c95", "Type": "int", "Comment": "Total current liabilities"}, {"Name": "c97", "Type": "int", "Comment": "Total long-term liabilities"}, {"Name": "c98", "Type": "int", "Comment": "Total Liabilities"}, {"Name": "c99", "Type": "int", "Comment": "Total shareholders' equity"}, {"Name": "captal", "Type": "int", "Comment": "Capital"}, {"Name": "e_state", "Type": "int", "Comment": "Where: National Capital"}, {"Name": "e_collective", "Type": "int", "Comment": "Collective capital"}, {"Name": "e_legal_person", "Type": "int", "Comment": "Corporate capital"}, {"Name": "e_individual", "Type": "int", "Comment": "Personal Capital"}, {"Name": "e_HMT", "Type": "int", "Comment": "Hong Kong, Macao and Taiwan capital"}, {"Name": "e_foreign", "Type": "int", "Comment": "Foreign capital"}, {"Name": "sales", "Type": "int", "Comment": "Sales revenue"}, {"Name": "c108", "Type": "int", "Comment": "Main business cost"}, {"Name": "c113", "Type": "int", "Comment": "Operating expenses"}, {"Name": "c110", "Type": "int", "Comment": "The main business tax and surcharges"}, {"Name": "c111", "Type": "int", "Comment": "sales profit"}, {"Name": "c114", "Type": "int", "Comment": "Management fees"}, {"Name": "c115", "Type": "int", "Comment": "Where: Taxes"}, {"Name": "c116", "Type": "int", "Comment": "Property insurance"}, {"Name": "c118", "Type": "int", "Comment": "Labor, unemployment insurance"}, {"Name": "c124", "Type": "int", "Comment": "Financial expenses"}, {"Name": "c125", "Type": "int", "Comment": "Of which: Interest expense"}, {"Name": "profit", "Type": "int", "Comment": "operating profit"}, {"Name": "c128", "Type": "int", "Comment": "Subsidy income"}, {"Name": "c131", "Type": "int", "Comment": "The total profit"}, {"Name": "c132", "Type": "int", "Comment": "Total loss"}, {"Name": "c133", "Type": "int", "Comment": "Total profit and tax"}, {"Name": "c134", "Type": "int", "Comment": "Income tax payable"}, {"Name": "c136", "Type": "int", "Comment": "Profit payable"}, {"Name": "wage", "Type": "int", "Comment": "Wages of the year"}, {"Name": "c140", "Type": "int", "Comment": "Where: Main Wages of business"}, {"Name": "c141", "Type": "int", "Comment": "This year the total amount of welfare payable (credit accumulated amount)"}, {"Name": "c142", "Type": "int", "Comment": "Where: Main business cope with the total welfare"}, {"Name": "c143", "Type": "int", "Comment": "Payable VAT"}, {"Name": "c144", "Type": "int", "Comment": "Input tax year"}, {"Name": "c145", "Type": "int", "Comment": "Output tax year"}, {"Name": "midput", "Type": "int", "Comment": "intermediate inputs"}, {"Name": "c62", "Type": "int", "Comment": "Persons Employed Total Total _"}, {"Name": "c147", "Type": "int", "Comment": "Taxes (processing)"}, {"Name": "c64", "Type": "int", "Comment": "Total annual revenue"}, {"Name": "c65", "Type": "int", "Comment": "Where: Main business revenue"}, {"Name": "c93", "Type": "int", "Comment": "Total assets 318"}, {"Name": "c16", "Type": "int", "Comment": "Provinces"}, {"Name": "c9", "Type": "string", "Comment": "State / Province / State)"}, {"Name": "c10", "Type": "string", "Comment": "The (autonomous regions and municipalities, prefectures and leagues)"}, {"Name": "c11", "Type": "string", "Comment": "Counties (districts, cities, flag)"}, {"Name": "c17", "Type": "string", "Comment": "Area Code"}, {"Name": "c29", "Type": "string", "Comment": "Registration (or approval) authority - the administrative department for industry and commerce"}, {"Name": "c167", "Type": "string", "Comment": "Founded union situation"}, {"Name": "c168", "Type": "int", "Comment": "unionized"}, {"Name": "v90", "Type": "int", "Comment": "number_unionized"}, {"Name": "c79", "Type": "int", "Comment": "short_term_investments"}, {"Name": "c96", "Type": "int", "Comment": "accounts_Payable"}, {"Name": "c117", "Type": "int", "Comment": "travel"}, {"Name": "c119", "Type": "int", "Comment": "union_funds"}, {"Name": "c121", "Type": "int", "Comment": "administrative_expenses"}, {"Name": "trainfee", "Type": "int", "Comment": "trainfee"}, {"Name": "c123", "Type": "int", "Comment": "sewage_charges"}, {"Name": "c127", "Type": "int", "Comment": "investment_income"}, {"Name": "c135", "Type": "int", "Comment": "advertising_fee"}, {"Name": "c120", "Type": "int", "Comment": "pension_medical_insurance"}, {"Name": "c138", "Type": "int", "Comment": "housing_fund"}, {"Name": "c148", "Type": "int", "Comment": "direct_aterial"}, {"Name": "c149", "Type": "int", "Comment": "intermediate_inputs"}, {"Name": "c150", "Type": "int", "Comment": "middle_management_fees_investment"}, {"Name": "c151", "Type": "int", "Comment": "operating_expenses "}, {"Name": "rdfee", "Type": "int", "Comment": "rdfee"}, {"Name": "c156", "Type": "string", "Comment": "Light and heavy industrial Name"}, {"Name": "c157", "Type": "string", "Comment": "Scale enterprises name"}, {"Name": "citycode", "Type": "string", "Comment": "City code clean by Zhao Ruili using adress"}, {"Name": "prov", "Type": "string", "Comment": ""}], "partition_keys": [], "metadata": {"DatabaseName": "firms_survey", "TablePrefix": "asif_", "target_S3URI": "s3://datalake-datascience/DATA/ECON/FIRM_SURVEY/ASIF_CHINA/UNZIP_DATA_CSV", "from_athena": "False"}}, {"description": "Create industry name 2 digits", "schema": [{"Name": "cic", "Type": "string", "Comment": "2 digits industry code"}, {"Name": "industry_name", "Type": "string", "Comment": "2 digits industry name"}, {"Name": "short", "Type": "string", "Comment": "2 digits industry short name"}], "partition_keys": [], "metadata": {"DatabaseName": "chinese_lookup", "TablePrefix": "ind_", "target_S3URI": "s3://datalake-datascience/DATA/ECON/LOOKUP_DATA/CIC_2_NAME", "from_athena": "False"}}, {"description": "Create consistent city code ", "schema": [{"Name": "extra_code", "Type": "string", "Comment": "All available city codes"}, {"Name": "geocode4_corr", "Type": "string", "Comment": "Normalised city code"}, {"Name": "citycn", "Type": "string", "Comment": "City name in Chinese"}, {"Name": "cityen", "Type": "string", "Comment": "City name in English"}, {"Name": "citycn_correct", "Type": "string", "Comment": "City name in Chinese, normalized"}, {"Name": "cityen_correct", "Type": "string", "Comment": "City name in English, normalized"}, {"Name": "province_cn", "Type": "string", "Comment": "Province name in Chinese"}, {"Name": "province_en", "Type": "string", "Comment": "Province name in English"}], "partition_keys": [], "metadata": {"DatabaseName": "chinese_lookup", "TablePrefix": "china_", "target_S3URI": "s3://datalake-datascience/DATA/ECON/LOOKUP_DATA/CITY_CODE_NORMALISED", "from_athena": "False"}}, {"description": "Create city reduction mandate policy 6th FYP", "schema": [{"Name": "citycn", "Type": "string", "Comment": "City name in Chinese"}, {"Name": "cityen", "Type": "string", "Comment": "City name in English"}, {"Name": "prov2013", "Type": "string", "Comment": "Province name in Chinese"}, {"Name": "province", "Type": "string", "Comment": "Province name in English"}, {"Name": "so2_05_city_reconstructed", "Type": "float", "Comment": "SO2 emission in 2005"}, {"Name": "so2_obj_2010", "Type": "float", "Comment": "SO2 emission in 2010, objective"}, {"Name": "tso2_mandate_c", "Type": "float", "Comment": "city reduction mandate in tonnes"}, {"Name": "so2_perc_reduction_c", "Type": "float", "Comment": "city reduction mandate in percentage"}, {"Name": "ttoutput", "Type": "float", "Comment": "total output by city"}, {"Name": "in_10_000_tonnes", "Type": "float", "Comment": "city reduction mandate in 10k tonnes"}], "partition_keys": [], "metadata": {"DatabaseName": "policy", "TablePrefix": "china_", "target_S3URI": "s3://datalake-datascience/DATA/ENVIRONMENT/CHINA/FYP/CITY_REDUCTION_MANDATE", "from_athena": "False"}}, {"description": "Create China city sector pollution", "schema": [{"Name": "year", "Type": "string", "Comment": ""}, {"Name": "prov2013", "Type": "string", "Comment": "Province name in Chinese"}, {"Name": "provinces", "Type": "string", "Comment": "Province name in English"}, {"Name": "citycode", "Type": "string", "Comment": "citycode refers to geocode4corr"}, {"Name": "citycn", "Type": "string", "Comment": "City name in Chinese"}, {"Name": "cityen", "Type": "string", "Comment": "City name in English"}, {"Name": "indus_code", "Type": "string", "Comment": "4 digits industry code"}, {"Name": "ind2", "Type": "string", "Comment": "2 digits industry code"}, {"Name": "ttoutput", "Type": "float", "Comment": "Total output city sector"}, {"Name": "twaste_water", "Type": "int", "Comment": "Total waste water city sector"}, {"Name": "tcod", "Type": "float", "Comment": "Total COD city sector"}, {"Name": "tammonia_nitrogen", "Type": "float", "Comment": "Total Ammonia Nitrogen city sector"}, {"Name": "twaste_gas", "Type": "int", "Comment": "Total Waste gas city sector"}, {"Name": "tso2", "Type": "int", "Comment": "Total so2 city sector"}, {"Name": "tnox", "Type": "int", "Comment": "Total NOx city sector"}, {"Name": "tsmoke_dust", "Type": "int", "Comment": "Total smoke dust city sector"}, {"Name": "tsoot", "Type": "int", "Comment": "Total soot city sector"}, {"Name": "lower_location", "Type": "string", "Comment": "Location city. one of Coastal, Central, Northwest, Northeast, Southwest"}, {"Name": "larger_location", "Type": "string", "Comment": "Location city. one of Eastern, Central, Western"}, {"Name": "coastal", "Type": "string", "Comment": "City is bordered by sea or not"}], "partition_keys": [], "metadata": {"DatabaseName": "environment", "TablePrefix": "china_", "target_S3URI": "s3://datalake-datascience/DATA/ENVIRONMENT/CHINA/CITY_SECTOR_POLLUTION", "from_athena": "False"}}, {"description": "Create Chinese province geographical description", "schema": [{"Name": "prov2013", "Type": "string", "Comment": "Province name,  in Chinese"}, {"Name": "province_en", "Type": "string", "Comment": "Province name,  in English"}, {"Name": "lower_location", "Type": "string", "Comment": "Location city. one of Coastal, Central, Northwest, Northeast, Southwest"}, {"Name": "larger_location", "Type": "string", "Comment": "Location city. one of Eastern, Central, Western"}, {"Name": "coastal", "Type": "string", "Comment": "City is bordered by sea or not"}], "partition_keys": [], "metadata": {"DatabaseName": "chinese_lookup", "TablePrefix": "geo_", "target_S3URI": "s3://datalake-datascience/DATA/ECON/LOOKUP_DATA/CHINESE_PROVINCE_LOCATION", "from_athena": "False"}}, {"description": "Create Control zone policy city", "schema": [{"Name": "province", "Type": "string", "Comment": "Province name"}, {"Name": "city", "Type": "string", "Comment": "City name"}, {"Name": "geocode4_corr", "Type": "string", "Comment": "City code"}, {"Name": "tcz", "Type": "string", "Comment": "Two control zone policy city"}, {"Name": "spz", "Type": "string", "Comment": "Special policy zone policy city"}], "partition_keys": [], "metadata": {"DatabaseName": "policy", "TablePrefix": "china_city_", "target_S3URI": "s3://datalake-datascience/DATA/ECON/POLICY/CHINA/STRUCTURAL_TRANSFORMATION/CITY_TARGET/TCZ_SPZ", "from_athena": "False"}}, {"description": "Create financial dependency at industry name 2 digits", "schema": [{"Name": "cic", "Type": "string", "Comment": "2 digits industry short name"}, {"Name": "industry_name", "Type": "string", "Comment": "2 digits industry short name"}, {"Name": "financial_dep_china", "Type": "float", "Comment": "Financial dependency metric"}], "partition_keys": [], "metadata": {"DatabaseName": "industry", "TablePrefix": "china_", "target_S3URI": "s3://datalake-datascience/DATA/ECON/INDUSTRY/ADDITIONAL_DATA/CHINA/CIC/CREDIT_CONSTRAINT", "from_athena": "False"}}]}, "PREPARATION": {"STEPS": [{"step": 0, "description": "\nPrepare ASIF raw data by removing unconsistent year format, industry and birth year\n", "query": "\nCREATE TABLE firms_survey.asif_firms_prepared WITH (format = 'PARQUET') AS\nWITH own AS(\nSELECT *,\narray_max(\n    ARRAY[e_state, e_collective, e_legal_person, e_individual, e_hmt, e_foreign]\n    ) AS max_array_equity,\nmap_keys(\n  map_filter(\n  map(\n  ARRAY[1,2,3,4,5, 6],\n  ARRAY[e_state, e_collective, e_legal_person, e_individual, e_hmt, e_foreign]\n  ),\n  (k, v) -> v = array_max(\n  ARRAY[e_state, e_collective, e_legal_person, e_individual, e_hmt, e_foreign]\n  )\n  )\n  ) AS max_key_array_equity\nFROM \"firms_survey\".\"asif_unzip_data_csv\"\nWHERE \n (\n  year in ('1998', '1999', '2000', '2001', '2002', '2003', '2004', '2005', '2006', '2007')\n  )\n  AND \n  (\n  LENGTH(citycode) = 4\n  AND \n  LENGTH(setup) = 4\n  AND \n  LENGTH(cic) <= 4\n  AND \n  regexp_like(firm, '\\d+') = TRUE\n    )\n    )\n     SELECT \n     \n     firm, year, export, dq, name, town, village, street, c15, zip, product1_, c26, c27, cic, type, c44, c45, setup, c47, c60, c61, employ, c69, output, new_product, c74, addval, cuasset, c80, c81, c82, c83, c84, c85, tofixed, c87, todepre, cudepre, netfixed, c91, c92, toasset, c95, c97, c98, c99, captal, e_state, e_collective, e_legal_person, e_individual, e_hmt, e_foreign, sales, c108, c113, c110, c111, c114, c115, c116, c118, c124, c125, profit, c128, c131, c132, c133, c134, c136, wage, c140, c141, c142, c143, c144, c145, midput, c62, c147, c64, c65, c93, c16, c9, c10, c11, c17, c29, c167, c168, v90, c79, c96, c117, c119, c121, trainfee,c123, c127, c135, c120, c138, c148, c149, c150, c151, rdfee, c156, c157, citycode, prov, ownership \n     \n     FROM (\n       SELECT\n     *,\n  CASE \n  WHEN type in ('159','160') AND max_key_array_equity = ARRAY[1] THEN 'COLLECTIVE'\n  WHEN type in ('159','160') AND max_key_array_equity = ARRAY[2] THEN 'SOE'\n  WHEN type in ('159','160') AND max_key_array_equity = ARRAY[3] THEN 'PRIVATE'\n  WHEN type in ('159','160') AND max_key_array_equity = ARRAY[4] THEN 'PRIVATE'\n  WHEN type in ('159','160') AND max_key_array_equity = ARRAY[5] THEN 'HTM'\n  WHEN type in ('159','160') AND max_key_array_equity = ARRAY[6] THEN 'FOREIGN'\n  WHEN type in ('110','141','143','151') THEN 'SOE' \n  WHEN type in ('120','130','142','149') THEN 'COLLECTIVE' \n  WHEN type in ('171','172','173','174','190') THEN 'PRIVATE' \n  WHEN type in ('210','220','230','240') THEN 'FOREIGN' \n  WHEN type in ( '310','320','330','340') THEN 'HTM'\n  END AS ownership\n       FROM own\n  \n       )\n       WHERE (\n         ownership in ('COLLECTIVE', 'SOE', 'PRIVATE', 'HTM', 'FOREIGN')  \n         AND\n         c98 > 0 AND c99 >0 AND tofixed > 0 AND sales > 0 AND output > 0\n         -- AND\n         -- c62 > 10 \n         AND \n         (c98 + c99) > tofixed\n         AND \n         (c98 + c99) > netfixed\n       )   \n", "schema": [{"Name": "firm", "Type": "string", "Comment": "firm ID"}, {"Name": "year", "Type": "string", "Comment": "balance sheet year"}, {"Name": "export", "Type": "int", "Comment": "Where: export delivery value"}, {"Name": "dq", "Type": "string", "Comment": "Province county code"}, {"Name": "name", "Type": "string", "Comment": "Corporate Name"}, {"Name": "town", "Type": "string", "Comment": "Township (town)"}, {"Name": "village", "Type": "string", "Comment": "Street (village), house number"}, {"Name": "street", "Type": "string", "Comment": "Street office"}, {"Name": "c15", "Type": "string", "Comment": "Community (neighborhood) and village committee"}, {"Name": "zip", "Type": "string", "Comment": "Zip code"}, {"Name": "product1_", "Type": "string", "Comment": "The main products (1)"}, {"Name": "c26", "Type": "string", "Comment": "The main products (2)"}, {"Name": "c27", "Type": "string", "Comment": "The main products (3)"}, {"Name": "cic", "Type": "string", "Comment": "Industry Code"}, {"Name": "type", "Type": "string", "Comment": "Registration Type"}, {"Name": "c44", "Type": "string", "Comment": "Holding case"}, {"Name": "c45", "Type": "string", "Comment": "Affiliation"}, {"Name": "setup", "Type": "string", "Comment": "year of creation"}, {"Name": "c47", "Type": "int", "Comment": "Opening (established) time - months"}, {"Name": "c60", "Type": "int", "Comment": "Code-scale enterprises"}, {"Name": "c61", "Type": "int", "Comment": "Light and heavy industrial codes"}, {"Name": "employ", "Type": "int", "Comment": "Employement"}, {"Name": "c69", "Type": "int", "Comment": "Industrial output (constant prices)"}, {"Name": "output", "Type": "int", "Comment": "Industrial output value (current prices)"}, {"Name": "new_product", "Type": "int", "Comment": "Where: New product output value"}, {"Name": "c74", "Type": "int", "Comment": "Industrial sales output value (current prices)"}, {"Name": "addval", "Type": "int", "Comment": "Value added"}, {"Name": "cuasset", "Type": "int", "Comment": "Current asset"}, {"Name": "c80", "Type": "int", "Comment": "Accounts Receivable"}, {"Name": "c81", "Type": "int", "Comment": "stock"}, {"Name": "c82", "Type": "int", "Comment": "Wherein: Finished"}, {"Name": "c83", "Type": "int", "Comment": "The average balance of current assets"}, {"Name": "c84", "Type": "int", "Comment": "Long-term investment"}, {"Name": "c85", "Type": "int", "Comment": "Total fixed assets (deprecated)"}, {"Name": "tofixed", "Type": "int", "Comment": "Total fixed assets (to use)"}, {"Name": "c87", "Type": "int", "Comment": "Where: the production and operation with"}, {"Name": "todepre", "Type": "int", "Comment": "total depreciation"}, {"Name": "cudepre", "Type": "int", "Comment": "current depreciation"}, {"Name": "netfixed", "Type": "int", "Comment": "net fixed asset"}, {"Name": "c91", "Type": "int", "Comment": "Intangible and Deferred"}, {"Name": "c92", "Type": "int", "Comment": "Intangible assets"}, {"Name": "toasset", "Type": "int", "Comment": "Total asset"}, {"Name": "c95", "Type": "int", "Comment": "Total current liabilities"}, {"Name": "c97", "Type": "int", "Comment": "Total long-term liabilities"}, {"Name": "c98", "Type": "int", "Comment": "Total Liabilities"}, {"Name": "c99", "Type": "int", "Comment": "Total shareholders' equity"}, {"Name": "captal", "Type": "int", "Comment": "Capital"}, {"Name": "e_state", "Type": "int", "Comment": "Where: National Capital"}, {"Name": "e_collective", "Type": "int", "Comment": "Collective capital"}, {"Name": "e_legal_person", "Type": "int", "Comment": "Corporate capital"}, {"Name": "e_individual", "Type": "int", "Comment": "Personal Capital"}, {"Name": "e_hmt", "Type": "bigint"}, {"Name": "e_foreign", "Type": "int", "Comment": "Foreign capital"}, {"Name": "sales", "Type": "int", "Comment": "Sales revenue"}, {"Name": "c108", "Type": "int", "Comment": "Main business cost"}, {"Name": "c113", "Type": "int", "Comment": "Operating expenses"}, {"Name": "c110", "Type": "int", "Comment": "The main business tax and surcharges"}, {"Name": "c111", "Type": "int", "Comment": "sales profit"}, {"Name": "c114", "Type": "int", "Comment": "Management fees"}, {"Name": "c115", "Type": "int", "Comment": "Where: Taxes"}, {"Name": "c116", "Type": "int", "Comment": "Property insurance"}, {"Name": "c118", "Type": "int", "Comment": "Labor, unemployment insurance"}, {"Name": "c124", "Type": "int", "Comment": "Financial expenses"}, {"Name": "c125", "Type": "int", "Comment": "Of which: Interest expense"}, {"Name": "profit", "Type": "int", "Comment": "operating profit"}, {"Name": "c128", "Type": "int", "Comment": "Subsidy income"}, {"Name": "c131", "Type": "int", "Comment": "The total profit"}, {"Name": "c132", "Type": "int", "Comment": "Total loss"}, {"Name": "c133", "Type": "int", "Comment": "Total profit and tax"}, {"Name": "c134", "Type": "int", "Comment": "Income tax payable"}, {"Name": "c136", "Type": "int", "Comment": "Profit payable"}, {"Name": "wage", "Type": "int", "Comment": "Wages of the year"}, {"Name": "c140", "Type": "int", "Comment": "Where: Main Wages of business"}, {"Name": "c141", "Type": "int", "Comment": "This year the total amount of welfare payable (credit accumulated amount)"}, {"Name": "c142", "Type": "int", "Comment": "Where: Main business cope with the total welfare"}, {"Name": "c143", "Type": "int", "Comment": "Payable VAT"}, {"Name": "c144", "Type": "int", "Comment": "Input tax year"}, {"Name": "c145", "Type": "int", "Comment": "Output tax year"}, {"Name": "midput", "Type": "int", "Comment": "intermediate inputs"}, {"Name": "c62", "Type": "int", "Comment": "Persons Employed Total Total _"}, {"Name": "c147", "Type": "int", "Comment": "Taxes (processing)"}, {"Name": "c64", "Type": "int", "Comment": "Total annual revenue"}, {"Name": "c65", "Type": "int", "Comment": "Where: Main business revenue"}, {"Name": "c93", "Type": "int", "Comment": "Total assets 318"}, {"Name": "c16", "Type": "int", "Comment": "Provinces"}, {"Name": "c9", "Type": "string", "Comment": "State / Province / State)"}, {"Name": "c10", "Type": "string", "Comment": "The (autonomous regions and municipalities, prefectures and leagues)"}, {"Name": "c11", "Type": "string", "Comment": "Counties (districts, cities, flag)"}, {"Name": "c17", "Type": "string", "Comment": "Area Code"}, {"Name": "c29", "Type": "string", "Comment": "Registration (or approval) authority - the administrative department for industry and commerce"}, {"Name": "c167", "Type": "string", "Comment": "Founded union situation"}, {"Name": "c168", "Type": "int", "Comment": "unionized"}, {"Name": "v90", "Type": "int", "Comment": "number_unionized"}, {"Name": "c79", "Type": "int", "Comment": "short_term_investments"}, {"Name": "c96", "Type": "int", "Comment": "accounts_Payable"}, {"Name": "c117", "Type": "int", "Comment": "travel"}, {"Name": "c119", "Type": "int", "Comment": "union_funds"}, {"Name": "c121", "Type": "int", "Comment": "administrative_expenses"}, {"Name": "trainfee", "Type": "int", "Comment": "trainfee"}, {"Name": "c123", "Type": "int", "Comment": "sewage_charges"}, {"Name": "c127", "Type": "int", "Comment": "investment_income"}, {"Name": "c135", "Type": "int", "Comment": "advertising_fee"}, {"Name": "c120", "Type": "int", "Comment": "pension_medical_insurance"}, {"Name": "c138", "Type": "int", "Comment": "housing_fund"}, {"Name": "c148", "Type": "int", "Comment": "direct_aterial"}, {"Name": "c149", "Type": "int", "Comment": "intermediate_inputs"}, {"Name": "c150", "Type": "int", "Comment": "middle_management_fees_investment"}, {"Name": "c151", "Type": "int", "Comment": "operating_expenses "}, {"Name": "rdfee", "Type": "int", "Comment": "rdfee"}, {"Name": "c156", "Type": "string", "Comment": "Light and heavy industrial Name"}, {"Name": "c157", "Type": "string", "Comment": "Scale enterprises name"}, {"Name": "citycode", "Type": "string", "Comment": "City code clean by Zhao Ruili using adress"}, {"Name": "prov", "Type": "string", "Comment": ""}], "partition_keys": ["firm", "year"], "metadata": {"DatabaseName": "firms_survey", "TableName": "asif_firms_prepared", "target_S3URI": "s3://datalake-datascience/DATA/ECON/FIRM_SURVEY/ASIF_CHINA/PREPARED", "from_athena": "True"}}, {"step": 1, "description": "\nCompute the financial ratio by city-industry\n", "query": "\nCREATE TABLE firms_survey.asif_industry_financial_ratio_city WITH (format = 'PARQUET') AS\nWITH test AS (\n  SELECT \n    *, \n    CASE WHEN LENGTH(cic) = 4 THEN substr(cic,1, 2) ELSE concat('0',substr(cic,1, 1)) END AS indu_2, \n    c98 + c99 as total_asset \n  FROM \n    firms_survey.asif_firms_prepared\n  INNER JOIN \n  (\n  SELECT extra_code, geocode4_corr\n  FROM chinese_lookup.china_city_code_normalised \n  GROUP BY extra_code, geocode4_corr\n  ) as no_dup_citycode\nON asif_firms_prepared.citycode = no_dup_citycode.extra_code\n) \nSELECT \n  * \nFROM \n  (\n    WITH ratio AS (\n      SELECT \n        year, \n        indu_2, \n        geocode4_corr,\n        CAST(\n    SUM(c80) AS DECIMAL(16, 5)\n  ) / NULLIF(\n    CAST(\n      SUM(cuasset) AS DECIMAL(16, 5)\n    ), \n    0\n  ) as receivable_curasset_it,\n  \n  CAST(\n    SUM(cuasset) - SUM(c79) - SUM(c80) - SUM(c81) - SUM(c82) AS DECIMAL(16, 5)\n  ) / NULLIF(\n    CAST(\n      SUM(cuasset) AS DECIMAL(16, 5)\n    ), \n    0\n  ) as cash_over_curasset_it,\n  \n  SUM(cuasset) - SUM(c95) as working_capital_it,\n  SUM(c81) + SUM(c80) - SUM(c96) AS working_capital_requirement_it,   \n  CAST(\n    SUM(cuasset) AS DECIMAL(16, 5)\n  ) / NULLIF(\n    CAST(\n      SUM(c95) AS DECIMAL(16, 5)\n    ), \n    0\n  ) AS current_ratio_it, \n  \n  CAST(\n    SUM(cuasset) - SUM(c79) - SUM(c80) - SUM(c81) AS DECIMAL(16, 5)\n  ) / NULLIF(\n    CAST(\n      SUM(c95) AS DECIMAL(16, 5)\n    ), \n    0\n  ) AS quick_ratio_it, \n\n  CAST(\n    SUM(cuasset) - SUM(c79) - SUM(c80) - SUM(c81) - SUM(c82) AS DECIMAL(16, 5)\n  ) / NULLIF(CAST(\n    SUM(c95) AS DECIMAL(16, 5)\n  ), \n    0\n  ) AS cash_ratio_it,\n  \n  -- Need to add asset or debt when bs requirement not meet\n  CASE \n  WHEN SUM(toasset) - (SUM(c98) + SUM(c99)) < 0 THEN\n  CAST(\n     SUM(c95) + SUM(c97) AS DECIMAL(16, 5)\n  )/ NULLIF(\n    CAST(\n     SUM(toasset) + ABS(SUM(toasset) - (SUM(c98) + SUM(c99)))  AS DECIMAL(16, 5)\n    ), \n    0\n  ) \n  WHEN SUM(toasset) - (SUM(c98) + SUM(c99)) > 0 THEN\n  CAST(\n     SUM(c95) + SUM(c97) + SUM(toasset) - (SUM(c98) + SUM(c99)) AS DECIMAL(16, 5)\n  )/ NULLIF(\n    CAST(\n     SUM(toasset)  AS DECIMAL(16, 5)\n    ), \n    0\n  )\n  ELSE\n  CAST(\n     SUM(c95) + SUM(c97) AS DECIMAL(16, 5)\n  )/ NULLIF(\n    CAST(\n     SUM(toasset)  AS DECIMAL(16, 5)\n    ), \n    0\n  )\n  END AS liabilities_assets_it, \n\n  CASE \n  WHEN SUM(toasset) - (SUM(c98) + SUM(c99)) < 0 THEN\n  CAST(SUM(sales) - (SUM(c108) + SUM(c113) + SUM(c114) + SUM(c116) + SUM(c118) + SUM(c124) + SUM(wage)) AS DECIMAL(16, 5))/ \n  NULLIF(CAST(SUM(toasset) + ABS(SUM(toasset) - (SUM(c98) + SUM(c99)))  AS DECIMAL(16, 5)), 0) \n  ELSE\n  CAST(SUM(sales) - (SUM(c108) + SUM(c113) + SUM(c114) + SUM(c116) + SUM(c118) + SUM(c124) + SUM(wage)) AS DECIMAL(16, 5))/ \n  NULLIF(CAST(SUM(toasset)  AS DECIMAL(16, 5)), 0) \n  END AS return_on_asset_it,\n  \n  CASE \n  WHEN SUM(toasset) - (SUM(c98) + SUM(c99)) < 0 THEN  \n  CAST(\n    SUM(sales) AS DECIMAL(16, 5)\n  )/ NULLIF(\n    CAST(\n      (\n          SUM(toasset) + ABS(SUM(toasset) - (SUM(c98) + SUM(c99))) - lag(SUM(toasset) + ABS(SUM(toasset) - (SUM(c98) + SUM(c99))),\n          1\n        ) over(\n          partition by indu_2, geocode4_corr \n          order by \n            geocode4_corr,\n            indu_2, \n            year\n        )\n      )/ 2 AS DECIMAL(16, 5)\n    ), \n    0\n  )\n  ELSE \n  CAST(\n    SUM(sales) AS DECIMAL(16, 5)\n  )/ NULLIF(\n    CAST(\n      (\n        SUM(toasset) - lag(\n          SUM(toasset), \n          1\n        ) over(\n          partition by indu_2, geocode4_corr\n          order by\n            geocode4_corr,\n            indu_2, \n            year\n        )\n      )/ 2 AS DECIMAL(16, 5)\n    ), \n    0\n  )\n  \n  END AS sales_assets_it,\n  \n  CASE \n  WHEN SUM(toasset) - (SUM(c98) + SUM(c99)) < 0 THEN  \n  CAST(\n    SUM(sales) AS DECIMAL(16, 5)\n  )/ NULLIF(\n    CAST(SUM(toasset) + ABS(SUM(toasset) - (SUM(c98) + SUM(c99))) AS DECIMAL(16, 5)), \n    0\n  )\n  ELSE \n  CAST(\n    SUM(sales) AS DECIMAL(16, 5)\n  )/ NULLIF(\n    CAST(\n    SUM(toasset) AS DECIMAL(16, 5)), \n    0\n  )\n  END AS sales_assets_andersen_it,\n  \n  CASE \n  WHEN SUM(toasset) - (SUM(c98) + SUM(c99)) < 0 THEN  \n  CAST(\n    SUM(cuasset) - SUM(c79) - SUM(c80) - SUM(c81) - SUM(c82) AS DECIMAL(16, 5)\n  )/ NULLIF(\n    CAST(SUM(toasset) + ABS(SUM(toasset) - (SUM(c98) + SUM(c99))) AS DECIMAL(16, 5)), \n    0\n  )\n  ELSE \n  CAST(\n    SUM(cuasset) - SUM(c79) - SUM(c80) - SUM(c81) - SUM(c82) AS DECIMAL(16, 5)\n  )/ NULLIF(\n    CAST(\n    SUM(toasset) AS DECIMAL(16, 5)), \n    0\n  )\n  END AS cash_over_totasset_it,\n  \n  CAST(SUM(rdfee) AS DECIMAL(16, 5))/ NULLIF(CAST(SUM(sales) AS DECIMAL(16, 5)),0) as rd_intensity_it,\n  CAST(SUM(c81)  AS DECIMAL(16, 5))/ NULLIF(CAST(SUM(sales) AS DECIMAL(16, 5)),0) as inventory_to_sales_it,\n  SUM(tofixed) - SUM(c92) AS asset_tangibility_it,\n  \n  CAST(\n      (\n        SUM(c96) - lag(\n          SUM(c96), \n          1\n        ) over(\n          partition by indu_2, geocode4_corr \n          order by \n          geocode4_corr,\n            indu_2, \n            year\n        )\n      ) AS DECIMAL(16, 5)\n      )/\n      NULLIF(\n    CAST(\n      (\n        SUM(total_asset) - lag(\n          SUM(total_asset), \n          1\n        ) over(\n          partition by indu_2, geocode4_corr \n          order by \n          geocode4_corr,\n            indu_2, \n            year\n        )\n      )/ 2 AS DECIMAL(16, 5)\n    ),0) as account_paybable_to_asset_it\n    \nFROM test\n      WHERE \n        year in ('2004', '2005', '2006') \n      GROUP BY \n      geocode4_corr,\n        indu_2, \n        year\n    ) \n    SELECT \n      *\n    FROM \n      (\n        WITH agg AS (\n          SELECT \n            indu_2, \n            geocode4_corr,\n            'FAKE_GROUP' as fake, \n            AVG(receivable_curasset_it) AS receivable_curasset_i, \n            AVG(cash_over_curasset_it) AS cash_over_curasset_i, \n            AVG(cash_over_totasset_it) AS cash_over_totasset_i, \n            \n            AVG(working_capital_it)/1000000 AS working_capital_i, \n            AVG(working_capital_requirement_it)/1000000 AS working_capital_requirement_i, \n            AVG(current_ratio_it) AS current_ratio_i, \n            AVG(quick_ratio_it) AS quick_ratio_i,\n            AVG(cash_ratio_it) AS cash_ratio_i, \n            \n            AVG(liabilities_assets_it) AS liabilities_assets_i, \n            AVG(return_on_asset_it) AS return_on_asset_i, \n            AVG(sales_assets_it) AS sales_assets_i,\n            AVG(sales_assets_andersen_it) AS sales_assets_andersen_i,\n            AVG(account_paybable_to_asset_it) AS account_paybable_to_asset_i,\n            AVG(asset_tangibility_it)/1000000 AS asset_tangibility_i, \n            \n            AVG(rd_intensity_it) AS rd_intensity_i, \n            AVG(inventory_to_sales_it) AS inventory_to_sales_i\n\n          FROM \n            ratio \n          GROUP BY \n            indu_2 ,\n            geocode4_corr\n        ) \n        SELECT \n          field0 AS indu_2, \n          field1 as geocode4_corr,\n          val_1[ 'receivable_curasset' ] AS receivable_curasset_ci, \n          val_2[ 'receivable_curasset' ] AS std_receivable_curasset_ci, \n          1 - val_1[ 'cash_over_curasset' ] AS cash_over_curasset_ci, \n          1 - val_2[ 'cash_over_curasset' ] AS std_cash_over_curasset_ci, \n          1 - val_1[ 'cash_over_totasset' ] AS cash_over_totasset_ci, \n          1 - val_2[ 'cash_over_totasset' ] AS std_cash_over_totasset_ci,\n          \n          val_1[ 'workink_capital' ] AS working_capital_ci, \n          val_2[ 'workink_capital' ] AS std_working_capital_ci, \n          val_1[ 'working_capital_requirement' ] AS working_capital_requirement_ci, \n          val_2[ 'working_capital_requirement' ] AS std_working_capital_requirement_ci, \n          val_1[ 'current_ratio' ] AS current_ratio_ci, \n          val_2[ 'current_ratio' ] AS std_current_ratio_ci, \n          val_1[ 'quick_ratio' ] AS quick_ratio_ci, \n          val_2[ 'quick_ratio' ] AS std_quick_ratio_ci,\n          1-val_1[ 'cash_ratio' ] AS cash_ratio_ci, \n          1-val_2[ 'cash_ratio' ] AS std_cash_ratio_ci, \n          \n          val_1[ 'liabilities_assets' ] AS liabilities_assets_ci, \n          val_2[ 'liabilities_assets' ] AS std_liabilities_assets_ci, \n          val_1[ 'return_on_asset' ] AS return_on_asset_ci, \n          val_2[ 'return_on_asset' ] AS std_return_on_asset_ci, \n          val_1[ 'sales_assets' ] AS sales_assets_ci, \n          val_2[ 'sales_assets' ] AS std_sales_assets_ci, \n          val_1[ 'sales_assets_andersen' ] AS sales_assets_andersen_ci, \n          val_2[ 'sales_assets_andersen' ] AS std_sales_assets_andersen_ci, \n          val_1[ 'account_paybable_to_asset' ] AS account_paybable_to_asset_ci, \n          val_2[ 'account_paybable_to_asset' ] AS std_account_paybable_to_asset_ci,\n          val_1[ 'asset_tangibility' ] AS asset_tangibility_ci, \n          val_2[ 'asset_tangibility' ] AS std_asset_tangibility_ci, \n          \n          val_1[ 'rd_intensity' ] AS rd_intensity_ci, \n          val_2[ 'rd_intensity' ] AS std_rd_intensity_ci, \n          val_1[ 'inventory_to_sales' ] AS inventory_to_sales_ci, \n          val_2[ 'inventory_to_sales' ] AS std_inventory_to_sales_ci\n         \n        FROM \n          (\n            SELECT \n              field0, \n              field1,\n              map_agg(w, field2) AS val_1, \n              map_agg(w, field3) AS val_2 \n            FROM \n              (\n                SELECT \n                  w, \n                  names.field0, \n                  names.field1, \n                  names.field2,\n                  names.field3\n                  \n                FROM \n                  (\n                    SELECT \n                      w, \n                      zip(\n                        array_indu_2, \n                        array_geocode4_corr,\n                        array_w, \n                        transform(\n                          array_w, \n                          x -> (x - avg)/ std_w\n                        )\n                      ) as zip_values \n                    FROM \n                      (\n                        SELECT \n                          w, \n                          avg, \n                          array_w, \n                          array_indu_2, \n                          array_geocode4_corr,\n                          std_w \n                        FROM \n                        (\n                            SELECT \n                              'receivable_curasset' as w, \n                              AVG(receivable_curasset_i) as avg, \n                              ARRAY_AGG(receivable_curasset_i) as array_w, \n                              ARRAY_AGG(indu_2) as array_indu_2, \n                              ARRAY_AGG(geocode4_corr) as array_geocode4_corr, \n                              stddev(receivable_curasset_i) as std_w \n                            FROM \n                              agg \n                            GROUP BY \n                              fake\n                          ) \n                        UNION \n                        (\n                            SELECT \n                              'cash_over_curasset' as w, \n                              AVG(cash_over_curasset_i) as avg, \n                              ARRAY_AGG(cash_over_curasset_i) as array_w, \n                              ARRAY_AGG(indu_2) as array_indu_2, \n                              ARRAY_AGG(geocode4_corr) as array_geocode4_corr, \n                              stddev(cash_over_curasset_i) as std_w \n                            FROM \n                              agg \n                            GROUP BY \n                              fake\n                          ) \n                        UNION \n                        (\n                            SELECT \n                              'cash_over_totasset' as w, \n                              AVG(cash_over_totasset_i) as avg, \n                              ARRAY_AGG(cash_over_totasset_i) as array_w, \n                              ARRAY_AGG(indu_2) as array_indu_2, \n                              ARRAY_AGG(geocode4_corr) as array_geocode4_corr, \n                              stddev(cash_over_totasset_i) as std_w \n                            FROM \n                              agg \n                            GROUP BY \n                              fake\n                          )\n                        UNION \n                          (\n                            SELECT \n                              'workink_capital' as w, \n                              AVG(working_capital_i) as avg, \n                              ARRAY_AGG(working_capital_i) as array_w, \n                              ARRAY_AGG(indu_2) as array_indu_2, \n                              ARRAY_AGG(geocode4_corr) as array_geocode4_corr, \n                              stddev(working_capital_i) as std_w \n                            FROM \n                              agg \n                            GROUP BY \n                              fake\n                          ) \n                        UNION \n                          (\n                            SELECT \n                              'working_capital_requirement' as w, \n                              AVG(working_capital_requirement_i) as avg, \n                              ARRAY_AGG(working_capital_requirement_i) as array_w, \n                              ARRAY_AGG(indu_2) as array_indu_2, \n                              ARRAY_AGG(geocode4_corr) as array_geocode4_corr, \n                              stddev(working_capital_requirement_i) as std_w \n                            FROM \n                              agg \n                            GROUP BY \n                              fake\n                          ) \n                        UNION \n                          (\n                            SELECT \n                              'current_ratio' as w, \n                              AVG(current_ratio_i) as avg, \n                              ARRAY_AGG(current_ratio_i) as array_w, \n                              ARRAY_AGG(indu_2) as array_indu_2, \n                              ARRAY_AGG(geocode4_corr) as array_geocode4_corr, \n                              stddev(current_ratio_i) as std_w \n                            FROM \n                              agg \n                            GROUP BY \n                              fake\n                          ) \n                        UNION \n                          (\n                            SELECT \n                              'quick_ratio' as w, \n                              AVG(quick_ratio_i) as avg, \n                              ARRAY_AGG(quick_ratio_i) as array_w, \n                              ARRAY_AGG(indu_2) as array_indu_2, \n                              ARRAY_AGG(geocode4_corr) as array_geocode4_corr, \n                              stddev(quick_ratio_i) as std_w \n                            FROM \n                              agg \n                            GROUP BY \n                              fake\n                          ) \n                        UNION \n                          (\n                            SELECT \n                              'cash_ratio' as w, \n                              AVG(cash_ratio_i) as avg, \n                              ARRAY_AGG(cash_ratio_i) as array_w, \n                              ARRAY_AGG(indu_2) as array_indu_2, \n                              ARRAY_AGG(geocode4_corr) as array_geocode4_corr, \n                              stddev(cash_ratio_i) as std_w \n                            FROM \n                              agg \n                            GROUP BY \n                              fake\n                          ) \n                        UNION \n                          (\n                            SELECT \n                              'liabilities_assets' as w, \n                              AVG(liabilities_assets_i) as avg, \n                              ARRAY_AGG(liabilities_assets_i) as array_w, \n                              ARRAY_AGG(indu_2) as array_indu_2, \n                              ARRAY_AGG(geocode4_corr) as array_geocode4_corr, \n                              stddev(liabilities_assets_i) as std_w \n                            FROM \n                              agg \n                            GROUP BY \n                              fake\n                          ) \n                        UNION \n                          (\n                            SELECT \n                              'return_on_asset' as w, \n                              AVG(return_on_asset_i) as avg, \n                              ARRAY_AGG(return_on_asset_i) as array_w, \n                              ARRAY_AGG(indu_2) as array_indu_2, \n                              ARRAY_AGG(geocode4_corr) as array_geocode4_corr, \n                              stddev(return_on_asset_i) as std_w \n                            FROM \n                              agg \n                            GROUP BY \n                              fake\n                          ) \n                        UNION \n                          (\n                            SELECT \n                              'sales_assets' as w, \n                              AVG(sales_assets_i) as avg, \n                              ARRAY_AGG(sales_assets_i) as array_w, \n                              ARRAY_AGG(indu_2) as array_indu_2, \n                              ARRAY_AGG(geocode4_corr) as array_geocode4_corr, \n                              stddev(sales_assets_i) as std_w \n                            FROM \n                              agg \n                            GROUP BY \n                              fake\n                          ) \n                        UNION \n                          (\n                            SELECT \n                              'sales_assets_andersen' as w, \n                              AVG(sales_assets_andersen_i) as avg, \n                              ARRAY_AGG(sales_assets_andersen_i) as array_w, \n                              ARRAY_AGG(indu_2) as array_indu_2, \n                              ARRAY_AGG(geocode4_corr) as array_geocode4_corr, \n                              stddev(sales_assets_andersen_i) as std_w \n                            FROM \n                              agg \n                            GROUP BY \n                              fake\n                          )\n                        UNION \n                          (\n                            SELECT \n                              'rd_intensity' as w, \n                              AVG(rd_intensity_i) as avg, \n                              ARRAY_AGG(rd_intensity_i) as array_w, \n                              ARRAY_AGG(indu_2) as array_indu_2, \n                              ARRAY_AGG(geocode4_corr) as array_geocode4_corr, \n                              stddev(rd_intensity_i) as std_w \n                            FROM \n                              agg \n                            GROUP BY \n                              fake\n                          ) \n                        UNION \n                          (\n                            SELECT \n                              'inventory_to_sales' as w, \n                              AVG(inventory_to_sales_i) as avg, \n                              ARRAY_AGG(inventory_to_sales_i) as array_w, \n                              ARRAY_AGG(indu_2) as array_indu_2, \n                              ARRAY_AGG(geocode4_corr) as array_geocode4_corr, \n                              stddev(inventory_to_sales_i) as std_w \n                            FROM \n                              agg \n                            GROUP BY \n                              fake\n                          ) \n                        UNION \n                          (\n                            SELECT \n                              'asset_tangibility' as w, \n                              AVG(asset_tangibility_i) as avg, \n                              ARRAY_AGG(asset_tangibility_i) as array_w, \n                              ARRAY_AGG(indu_2) as array_indu_2, \n                              ARRAY_AGG(geocode4_corr) as array_geocode4_corr, \n                              stddev(asset_tangibility_i) as std_w \n                            FROM \n                              agg \n                            GROUP BY \n                              fake\n                          ) \n                        UNION \n                          (\n                            SELECT \n                              'account_paybable_to_asset' as w, \n                              AVG(account_paybable_to_asset_i) as avg, \n                              ARRAY_AGG(account_paybable_to_asset_i) as array_w, \n                              ARRAY_AGG(indu_2) as array_indu_2, \n                              ARRAY_AGG(geocode4_corr) as array_geocode4_corr, \n                              stddev(account_paybable_to_asset_i) as std_w \n                            FROM \n                              agg \n                            GROUP BY \n                              fake\n                          )\n                      )\n                  ) CROSS \n                  JOIN UNNEST(zip_values) as t(names)\n              ) \n            GROUP BY \n              field0, field1\n          )\n      )\n      ORDER BY indu_2, geocode4_corr\n  )\n", "schema": [{"Name": "indu_2", "Type": "string", "Comment": "Two digits industry. If length cic equals to 3, then add 0 to indu_2"}, {"Name": "geocode4_corr", "Type": "string", "Comment": ""}, {"Name": "receivable_curasset_ci", "Type": "double", "Comment": "\u5e94\u6536\u5e10\u6b3e (c80) / cuasset"}, {"Name": "std_receivable_curasset_ci", "Type": "double", "Comment": "standaridzed values (x - x mean) / std)"}, {"Name": "cash_over_curasset_ci", "Type": "double", "Comment": "1 - (\u5176\u4e2d\uff1a\u77ed\u671f\u6295\u8d44 (c79) - \u5e94\u6536\u5e10\u6b3e (c80) - \u5b58\u8d27 (c81) - \u5176\u4e2d\uff1a\u4ea7\u6210\u54c1 (c82)) /current asset"}, {"Name": "std_cash_over_curasset_ci", "Type": "double", "Comment": "standaridzed values (x - x mean) / std)"}, {"Name": "1 - cash_over_totasset_ci", "Type": "double", "Comment": "(\u5176\u4e2d\uff1a\u77ed\u671f\u6295\u8d44 (c79) - \u5e94\u6536\u5e10\u6b3e (c80) - \u5b58\u8d27 (c81) - \u5176\u4e2d\uff1a\u4ea7\u6210\u54c1 (c82)) /toasset"}, {"Name": "std_cash_over_totasset_ci", "Type": "double", "Comment": "standaridzed values (x - x mean) / std)"}, {"Name": "working_capital_ci", "Type": "double", "Comment": "cuasset- \u6d41\u52a8\u8d1f\u503a\u5408\u8ba1 (c95)"}, {"Name": "std_working_capital_ci", "Type": "double", "Comment": "standaridzed values (x - x mean) / std)"}, {"Name": "working_capital_requirement_ci", "Type": "double", "Comment": "\u5b58\u8d27 (c81) + \u5e94\u6536\u5e10\u6b3e (c80) - \u5e94\u4ed8\u5e10\u6b3e  (c96)"}, {"Name": "std_working_capital_requirement_ci", "Type": "double", "Comment": "standaridzed values (x - x mean) / std)"}, {"Name": "current_ratio_ci", "Type": "double", "Comment": "cuasset/\u6d41\u52a8\u8d1f\u503a\u5408\u8ba1 (c95)"}, {"Name": "std_current_ratio_ci", "Type": "double", "Comment": "standaridzed values (x - x mean) / std)"}, {"Name": "quick_ratio_ci", "Type": "double", "Comment": "(cuasset -  \u5176\u4e2d\uff1a\u77ed\u671f\u6295\u8d44 (c79) - \u5e94\u6536\u5e10\u6b3e (c80) - \u5b58\u8d27 (c81)) / \u6d41\u52a8\u8d1f\u503a\u5408\u8ba1 (c95)"}, {"Name": "std_quick_ratio_ci", "Type": "double", "Comment": "standaridzed values (x - x mean) / std)"}, {"Name": "cash_ratio_ci", "Type": "double", "Comment": "(cuasset - \u5176\u4e2d\uff1a\u77ed\u671f\u6295\u8d44 (c79) - \u5e94\u6536\u5e10\u6b3e (c80) - \u5b58\u8d27 (c81) - \u5176\u4e2d\uff1a\u4ea7\u6210\u54c1 (c82))/ \u6d41\u52a8\u8d1f\u503a\u5408\u8ba1 (c95)"}, {"Name": "std_cash_ratio_ci", "Type": "double", "Comment": "standaridzed values (x - x mean) / std)"}, {"Name": "liabilities_assets_ci", "Type": "double", "Comment": "(\u6d41\u52a8\u8d1f\u503a\u5408\u8ba1 (c95) + \u957f\u671f\u8d1f\u503a\u5408\u8ba1 (c97)) / toasset"}, {"Name": "std_liabilities_assets_ci", "Type": "double", "Comment": "standaridzed values (x - x mean) / std)"}, {"Name": "return_on_asset_ci", "Type": "double", "Comment": "sales - (\u4e3b\u8425\u4e1a\u52a1\u6210\u672c (c108) + \u8425\u4e1a\u8d39\u7528 (c113) + \u7ba1\u7406\u8d39\u7528 (c114) + \u8d22\u4ea7\u4fdd\u9669\u8d39 (c116) + \u52b3\u52a8\u3001\u5931\u4e1a\u4fdd\u9669\u8d39 (c118)+ \u8d22\u52a1\u8d39\u7528 (c124) + \u672c\u5e74\u5e94\u4ed8\u5de5\u8d44\u603b\u989d (wage)) /toasset"}, {"Name": "std_return_on_asset_ci", "Type": "double", "Comment": "standaridzed values (x - x mean) / std)"}, {"Name": "sales_assets_ci", "Type": "double", "Comment": "\u5168\u5e74\u8425\u4e1a\u6536\u5165\u5408\u8ba1 (c64) /(\\Delta toasset/2)"}, {"Name": "std_sales_assets_ci", "Type": "double", "Comment": "standaridzed values (x - x mean) / std)"}, {"Name": "sales_assets_andersen_ci", "Type": "double", "Comment": "Sales over asset"}, {"Name": "std_sales_assets_andersen_ci", "Type": "double", "Comment": "standaridzed values (x - x mean) / std)"}, {"Name": "account_paybable_to_asset_ci", "Type": "double", "Comment": "(\\Delta \u5e94\u4ed8\u5e10\u6b3e  (c96))/ (\\Delta (toasset))"}, {"Name": "std_account_paybable_to_asset_ci", "Type": "double", "Comment": "standaridzed values (x - x mean) / std)"}, {"Name": "asset_tangibility_ci", "Type": "double", "Comment": "Total fixed assets - Intangible assets"}, {"Name": "std_asset_tangibility_ci", "Type": "double", "Comment": "standaridzed values (x - x mean) / std)"}, {"Name": "rd_intensity_ci", "Type": "double", "Comment": "rdfee/\u5168\u5e74\u8425\u4e1a\u6536\u5165\u5408\u8ba1 (c64)"}, {"Name": "std_rd_intensity_ci", "Type": "double", "Comment": "standaridzed values (x - x mean) / std)"}, {"Name": "inventory_to_sales_ci", "Type": "double", "Comment": "\u5b58\u8d27 (c81) / sales"}, {"Name": "std_inventory_to_sales_ci", "Type": "double", "Comment": "standaridzed values (x - x mean) / std)"}], "partition_keys": ["geocode4_corr", "indu_2"], "metadata": {"DatabaseName": "firms_survey", "TableName": "asif_industry_financial_ratio_city", "target_S3URI": "s3://datalake-datascience/DATA/ECON/FIRM_SURVEY/ASIF_CHINA/TRANSFORMED/FINANCIAL_RATIO/CITY", "from_athena": "True"}}]}, "TRANSFORMATION": {"STEPS": [{"step": 1, "description": "\n Yearly Rank sectors based on SO2 emissionsand label them as ABOVE or BELOW\n", "query": "\nCREATE TABLE environment.china_sector_pollution_threshold WITH (format = 'PARQUET') AS\nWITH agg_ind2 AS (\n  SELECT \n    year, \n    ind2, \n    SUM(tso2) as tso2 \n  FROM environment.china_city_sector_pollution \n  GROUP BY \n    year, \n    ind2\n) \nSELECT \n  agg_ind2.year, \n  ind2, \n  tso2, \n  pct_75_tso2, \n  avg_tso2, \n  mdn_tso2,\n  CASE WHEN tso2 > pct_75_tso2 THEN 'ABOVE' ELSE 'BELOW' END AS polluted_di,\n  CASE WHEN tso2 > avg_tso2 THEN 'ABOVE' ELSE 'BELOW' END AS polluted_mi,\n  CASE WHEN tso2 > mdn_tso2 THEN 'ABOVE' ELSE 'BELOW' END AS polluted_mei,\n  CASE WHEN tso2 > 68070.78 THEN 'ABOVE' ELSE 'BELOW' END AS polluted_thre\nFROM \n  agg_ind2 \n  LEFT JOIN (\n    SELECT \n      year, \n      approx_percentile(tso2,.75) AS pct_75_tso2, \n      AVG(tso2) AS avg_tso2, \n      approx_percentile(tso2,.50) AS mdn_tso2 \n    FROM \n      agg_ind2 \n    WHERE \n      tso2 > 0 \n    GROUP BY \n      year \n    ORDER BY \n      year\n  ) as threshold ON agg_ind2.year = threshold.year \n  ORDER BY year, ind2\n", "schema": [{"Name": "year", "Type": "string", "Comment": ""}, {"Name": "ind2", "Type": "string", "Comment": ""}, {"Name": "tso2", "Type": "bigint", "Comment": ""}, {"Name": "pct_75_tso2", "Type": "bigint", "Comment": "Yearly 75th percentile of SO2"}, {"Name": "avg_tso2", "Type": "double", "Comment": "Yearly average of SO2"}, {"Name": "mdn_tso2", "Type": "bigint", "Comment": "Yearly median of SO2"}, {"Name": "polluted_di", "Type": "varchar(5)", "Comment": "Sectors with values above Yearly 75th percentile of SO2 label as ABOVE else BELOW"}, {"Name": "polluted_mi", "Type": "varchar(5)", "Comment": "Sectors with values above Yearly average of SO2 label as ABOVE else BELOW"}, {"Name": "polluted_mei", "Type": "varchar(5)", "Comment": "Sectors with values above Yearly median of SO2 label as ABOVE else BELOW"}, {"Name": "polluted_thre", "Type": "varchar(5)", "Comment": "Sectors with values above 68070.78  of SO2 label as ABOVE else BELOW"}], "partition_keys": ["year", "polluted_di"], "metadata": {"DatabaseName": "environment", "TableName": "china_sector_pollution_threshold", "target_S3URI": "s3://datalake-datascience/DATA/ENVIRONMENT/CHINA/SECTOR_POLLUTION_THRESHOLD", "from_athena": "True"}}, {"step": 0, "description": "\nCompute the financial ratio by industry\n", "query": "\nCREATE TABLE firms_survey.asif_industry_financial_ratio_industry WITH (format = 'PARQUET') AS\n\nWITH test AS (\n  SELECT \n    *, \n    CASE WHEN LENGTH(cic) = 4 THEN substr(cic,1, 2) ELSE concat('0',substr(cic,1, 1)) END AS indu_2, \n    c98 + c99 as total_asset \n  FROM \n    firms_survey.asif_firms_prepared\n) \nSELECT \n  * \nFROM \n  (\n    WITH ratio AS (\n      SELECT \n        year, \n        indu_2, \n        CAST(\n    SUM(c80) AS DECIMAL(16, 5)\n  ) / NULLIF(\n    CAST(\n      SUM(cuasset) AS DECIMAL(16, 5)\n    ), \n    0\n  ) as receivable_curasset_it,\n  \n  CAST(\n    SUM(cuasset) - SUM(c79) - SUM(c80) - SUM(c81) - SUM(c82) AS DECIMAL(16, 5)\n  ) / NULLIF(\n    CAST(\n      SUM(cuasset) AS DECIMAL(16, 5)\n    ), \n    0\n  ) as cash_over_curasset_it,\n  \n  SUM(cuasset) - SUM(c95) as working_capital_it,\n  SUM(c81) + SUM(c80) - SUM(c96) AS working_capital_requirement_it,   \n  CAST(\n    SUM(cuasset) AS DECIMAL(16, 5)\n  ) / NULLIF(\n    CAST(\n      SUM(c95) AS DECIMAL(16, 5)\n    ), \n    0\n  ) AS current_ratio_it, \n  \n  CAST(\n    SUM(cuasset) - SUM(c79) - SUM(c80) - SUM(c81) AS DECIMAL(16, 5)\n  ) / NULLIF(\n    CAST(\n      SUM(c95) AS DECIMAL(16, 5)\n    ), \n    0\n  ) AS quick_ratio_it, \n\n  CAST(\n    SUM(cuasset) - SUM(c79) - SUM(c80) - SUM(c81) - SUM(c82) AS DECIMAL(16, 5)\n  ) / NULLIF(CAST(\n    SUM(c95) AS DECIMAL(16, 5)\n  ), \n    0\n  ) AS cash_ratio_it,\n  \n  -- Need to add asset or debt when bs requirement not meet\n  CASE \n  WHEN SUM(toasset) - (SUM(c98) + SUM(c99)) < 0 THEN\n  CAST(\n     SUM(c95) + SUM(c97) AS DECIMAL(16, 5)\n  )/ NULLIF(\n    CAST(\n     SUM(toasset) + ABS(SUM(toasset) - (SUM(c98) + SUM(c99)))  AS DECIMAL(16, 5)\n    ), \n    0\n  ) \n  WHEN SUM(toasset) - (SUM(c98) + SUM(c99)) > 0 THEN\n  CAST(\n     SUM(c95) + SUM(c97) + SUM(toasset) - (SUM(c98) + SUM(c99)) AS DECIMAL(16, 5)\n  )/ NULLIF(\n    CAST(\n     SUM(toasset)  AS DECIMAL(16, 5)\n    ), \n    0\n  )\n  ELSE\n  CAST(\n     SUM(c95) + SUM(c97) AS DECIMAL(16, 5)\n  )/ NULLIF(\n    CAST(\n     SUM(toasset)  AS DECIMAL(16, 5)\n    ), \n    0\n  )\n  END AS liabilities_assets_it, \n\n  CASE \n  WHEN SUM(toasset) - (SUM(c98) + SUM(c99)) < 0 THEN\n  CAST(SUM(sales) - (SUM(c108) + SUM(c113) + SUM(c114) + SUM(c116) + SUM(c118) + SUM(c124) + SUM(wage)) AS DECIMAL(16, 5))/ \n  NULLIF(CAST(SUM(toasset) + ABS(SUM(toasset) - (SUM(c98) + SUM(c99)))  AS DECIMAL(16, 5)), 0) \n  ELSE\n  CAST(SUM(sales) - (SUM(c108) + SUM(c113) + SUM(c114) + SUM(c116) + SUM(c118) + SUM(c124) + SUM(wage)) AS DECIMAL(16, 5))/ \n  NULLIF(CAST(SUM(toasset)  AS DECIMAL(16, 5)), 0) \n  END AS return_on_asset_it,\n  \n  CASE \n  WHEN SUM(toasset) - (SUM(c98) + SUM(c99)) < 0 THEN  \n  CAST(\n    SUM(sales) AS DECIMAL(16, 5)\n  )/ NULLIF(\n    CAST(\n      (\n          SUM(toasset) + ABS(SUM(toasset) - (SUM(c98) + SUM(c99))) - lag(SUM(toasset) + ABS(SUM(toasset) - (SUM(c98) + SUM(c99))),\n          1\n        ) over(\n          partition by indu_2 \n          order by \n            indu_2, \n            year\n        )\n      )/ 2 AS DECIMAL(16, 5)\n    ), \n    0\n  )\n  ELSE \n  CAST(\n    SUM(sales) AS DECIMAL(16, 5)\n  )/ NULLIF(\n    CAST(\n      (\n        SUM(toasset) - lag(\n          SUM(toasset), \n          1\n        ) over(\n          partition by indu_2 \n          order by \n            indu_2, \n            year\n        )\n      )/ 2 AS DECIMAL(16, 5)\n    ), \n    0\n  )\n  \n  END AS sales_assets_it,\n  \n  CASE \n  WHEN SUM(toasset) - (SUM(c98) + SUM(c99)) < 0 THEN  \n  CAST(\n    SUM(sales) AS DECIMAL(16, 5)\n  )/ NULLIF(\n    CAST(SUM(toasset) + ABS(SUM(toasset) - (SUM(c98) + SUM(c99))) AS DECIMAL(16, 5)), \n    0\n  )\n  ELSE \n  CAST(\n    SUM(sales) AS DECIMAL(16, 5)\n  )/ NULLIF(\n    CAST(\n    SUM(toasset) AS DECIMAL(16, 5)), \n    0\n  )\n  END AS sales_assets_andersen_it,\n  \n  CAST(SUM(rdfee) AS DECIMAL(16, 5))/ NULLIF(CAST(SUM(sales) AS DECIMAL(16, 5)),0) as rd_intensity_it,\n  CAST(SUM(c81)  AS DECIMAL(16, 5))/ NULLIF(CAST(SUM(sales) AS DECIMAL(16, 5)),0) as inventory_to_sales_it,\n  SUM(tofixed) - SUM(c92) AS asset_tangibility_it,\n  \n  CAST(\n      (\n        SUM(c96) - lag(\n          SUM(c96), \n          1\n        ) over(\n          partition by indu_2 \n          order by \n            indu_2, \n            year\n        )\n      ) AS DECIMAL(16, 5)\n      )/\n      NULLIF(\n    CAST(\n      (\n        SUM(total_asset) - lag(\n          SUM(total_asset), \n          1\n        ) over(\n          partition by indu_2 \n          order by \n            indu_2, \n            year\n        )\n      )/ 2 AS DECIMAL(16, 5)\n    ),0) as account_paybable_to_asset_it\n    \nFROM test\n      WHERE \n        year in ('2004', '2005', '2006') \n      GROUP BY \n        indu_2, \n        year\n    ) \n    SELECT \n      * \n    FROM \n      (\n        WITH agg AS (\n          SELECT \n            indu_2, \n            'FAKE_GROUP' as fake, \n            AVG(receivable_curasset_it) AS receivable_curasset_i, \n            AVG(cash_over_curasset_it) AS cash_over_curasset_i, \n            \n            AVG(working_capital_it)/1000000 AS working_capital_i, \n            AVG(working_capital_requirement_it)/1000000 AS working_capital_requirement_i, \n            AVG(current_ratio_it) AS current_ratio_i, \n            AVG(quick_ratio_it) AS quick_ratio_i,\n            AVG(cash_ratio_it) AS cash_ratio_i, \n            \n            AVG(liabilities_assets_it) AS liabilities_assets_i, \n            AVG(return_on_asset_it) AS return_on_asset_i, \n            AVG(sales_assets_it) AS sales_assets_i, \n            AVG(sales_assets_andersen_it) AS sales_assets_andersen_i, \n            AVG(account_paybable_to_asset_it) AS account_paybable_to_asset_i,\n            AVG(asset_tangibility_it)/1000000 AS asset_tangibility_i, \n            \n            AVG(rd_intensity_it) AS rd_intensity_i, \n            AVG(inventory_to_sales_it) AS inventory_to_sales_i\n\n          FROM \n            ratio \n          GROUP BY \n            indu_2 \n        ) \n        SELECT \n          field0 AS indu_2, \n          val_1[ 'receivable_curasset' ] AS receivable_curasset_i, \n          val_2[ 'receivable_curasset' ] AS std_receivable_curasset_i, \n          val_1[ 'cash_over_curasset' ] AS cash_over_curasset_i, \n          val_2[ 'cash_over_curasset' ] AS std_cash_over_curasset_i, \n          \n          val_1[ 'workink_capital' ] AS working_capital_i, \n          val_2[ 'workink_capital' ] AS std_working_capital_i, \n          val_1[ 'working_capital_requirement' ] AS working_capital_requirement_i, \n          val_2[ 'working_capital_requirement' ] AS std_working_capital_requirement_i, \n          val_1[ 'current_ratio' ] AS current_ratio_i, \n          val_2[ 'current_ratio' ] AS std_current_ratio_i, \n          val_1[ 'quick_ratio' ] AS quick_ratio_i, \n          val_2[ 'quick_ratio' ] AS std_quick_ratio_i,\n          1 - val_1[ 'cash_ratio' ] AS cash_ratio_i, \n          1 - val_2[ 'cash_ratio' ] AS std_cash_ratio_i, \n          \n          val_1[ 'liabilities_assets' ] AS liabilities_assets_i, \n          val_2[ 'liabilities_assets' ] AS std_liabilities_assets_i, \n          val_1[ 'return_on_asset' ] AS return_on_asset_i, \n          val_2[ 'return_on_asset' ] AS std_return_on_asset_i, \n          val_1[ 'sales_assets' ] AS sales_assets_i, \n          val_2[ 'sales_assets' ] AS std_sales_assets_i, \n          val_1[ 'sales_assets_andersen' ] AS sales_assets_andersen_i, \n          val_2[ 'sales_assets_andersen' ] AS std_sales_assets_andersen_i, \n          val_1[ 'account_paybable_to_asset' ] AS account_paybable_to_asset_i, \n          val_2[ 'account_paybable_to_asset' ] AS std_account_paybable_to_asset_i,\n          val_1[ 'asset_tangibility' ] AS asset_tangibility_i, \n          val_2[ 'asset_tangibility' ] AS std_asset_tangibility_i, \n          \n          val_1[ 'rd_intensity' ] AS rd_intensity_i, \n          val_2[ 'rd_intensity' ] AS std_rd_intensity_i, \n          val_1[ 'inventory_to_sales' ] AS inventory_to_sales_i, \n          val_2[ 'inventory_to_sales' ] AS std_inventory_to_sales_i\n         \n        FROM \n          (\n            SELECT \n              field0, \n              map_agg(w, field1) AS val_1, \n              map_agg(w, field2) AS val_2 \n            FROM \n              (\n                SELECT \n                  w, \n                  names.field0, \n                  names.field1, \n                  names.field2 \n                FROM \n                  (\n                    SELECT \n                      w, \n                      zip(\n                        array_indu_2, \n                        array_w, \n                        transform(\n                          array_w, \n                          x -> (x - avg)/ std_w\n                        )\n                      ) as zip_values \n                    FROM \n                      (\n                        SELECT \n                          w, \n                          avg, \n                          array_w, \n                          array_indu_2, \n                          std_w \n                        FROM \n                        (\n                            SELECT \n                              'receivable_curasset' as w, \n                              AVG(receivable_curasset_i) as avg, \n                              ARRAY_AGG(receivable_curasset_i) as array_w, \n                              ARRAY_AGG(indu_2) as array_indu_2, \n                              stddev(receivable_curasset_i) as std_w \n                            FROM \n                              agg \n                            GROUP BY \n                              fake\n                          ) \n                        UNION \n                        (\n                            SELECT \n                              'cash_over_curasset' as w, \n                              AVG(cash_over_curasset_i) as avg, \n                              ARRAY_AGG(cash_over_curasset_i) as array_w, \n                              ARRAY_AGG(indu_2) as array_indu_2, \n                              stddev(cash_over_curasset_i) as std_w \n                            FROM \n                              agg \n                            GROUP BY \n                              fake\n                          ) \n                        UNION \n                          (\n                            SELECT \n                              'workink_capital' as w, \n                              AVG(working_capital_i) as avg, \n                              ARRAY_AGG(working_capital_i) as array_w, \n                              ARRAY_AGG(indu_2) as array_indu_2, \n                              stddev(working_capital_i) as std_w \n                            FROM \n                              agg \n                            GROUP BY \n                              fake\n                          ) \n                        UNION \n                          (\n                            SELECT \n                              'working_capital_requirement' as w, \n                              AVG(working_capital_requirement_i) as avg, \n                              ARRAY_AGG(working_capital_requirement_i) as array_w, \n                              ARRAY_AGG(indu_2) as array_indu_2, \n                              stddev(working_capital_requirement_i) as std_w \n                            FROM \n                              agg \n                            GROUP BY \n                              fake\n                          ) \n                        UNION \n                          (\n                            SELECT \n                              'current_ratio' as w, \n                              AVG(current_ratio_i) as avg, \n                              ARRAY_AGG(current_ratio_i) as array_w, \n                              ARRAY_AGG(indu_2) as array_indu_2, \n                              stddev(current_ratio_i) as std_w \n                            FROM \n                              agg \n                            GROUP BY \n                              fake\n                          ) \n                        UNION \n                          (\n                            SELECT \n                              'quick_ratio' as w, \n                              AVG(quick_ratio_i) as avg, \n                              ARRAY_AGG(quick_ratio_i) as array_w, \n                              ARRAY_AGG(indu_2) as array_indu_2, \n                              stddev(quick_ratio_i) as std_w \n                            FROM \n                              agg \n                            GROUP BY \n                              fake\n                          ) \n                        UNION \n                          (\n                            SELECT \n                              'cash_ratio' as w, \n                              AVG(cash_ratio_i) as avg, \n                              ARRAY_AGG(cash_ratio_i) as array_w, \n                              ARRAY_AGG(indu_2) as array_indu_2, \n                              stddev(cash_ratio_i) as std_w \n                            FROM \n                              agg \n                            GROUP BY \n                              fake\n                          ) \n                        UNION \n                          (\n                            SELECT \n                              'liabilities_assets' as w, \n                              AVG(liabilities_assets_i) as avg, \n                              ARRAY_AGG(liabilities_assets_i) as array_w, \n                              ARRAY_AGG(indu_2) as array_indu_2, \n                              stddev(liabilities_assets_i) as std_w \n                            FROM \n                              agg \n                            GROUP BY \n                              fake\n                          ) \n                        UNION \n                          (\n                            SELECT \n                              'return_on_asset' as w, \n                              AVG(return_on_asset_i) as avg, \n                              ARRAY_AGG(return_on_asset_i) as array_w, \n                              ARRAY_AGG(indu_2) as array_indu_2, \n                              stddev(return_on_asset_i) as std_w \n                            FROM \n                              agg \n                            GROUP BY \n                              fake\n                          ) \n                        UNION \n                          (\n                            SELECT \n                              'sales_assets' as w, \n                              AVG(sales_assets_i) as avg, \n                              ARRAY_AGG(sales_assets_i) as array_w, \n                              ARRAY_AGG(indu_2) as array_indu_2, \n                              stddev(sales_assets_i) as std_w \n                            FROM \n                              agg \n                            GROUP BY \n                              fake\n                          )\n                        UNION \n                          (\n                            SELECT \n                              'sales_assets_andersen' as w, \n                              AVG(sales_assets_andersen_i) as avg, \n                              ARRAY_AGG(sales_assets_andersen_i) as array_w, \n                              ARRAY_AGG(indu_2) as array_indu_2, \n                              stddev(sales_assets_andersen_i) as std_w \n                            FROM \n                              agg \n                            GROUP BY \n                              fake\n                          )\n                        UNION \n                          (\n                            SELECT \n                              'rd_intensity' as w, \n                              AVG(rd_intensity_i) as avg, \n                              ARRAY_AGG(rd_intensity_i) as array_w, \n                              ARRAY_AGG(indu_2) as array_indu_2, \n                              stddev(rd_intensity_i) as std_w \n                            FROM \n                              agg \n                            GROUP BY \n                              fake\n                          ) \n                        UNION \n                          (\n                            SELECT \n                              'inventory_to_sales' as w, \n                              AVG(inventory_to_sales_i) as avg, \n                              ARRAY_AGG(inventory_to_sales_i) as array_w, \n                              ARRAY_AGG(indu_2) as array_indu_2, \n                              stddev(inventory_to_sales_i) as std_w \n                            FROM \n                              agg \n                            GROUP BY \n                              fake\n                          ) \n                        UNION \n                          (\n                            SELECT \n                              'asset_tangibility' as w, \n                              AVG(asset_tangibility_i) as avg, \n                              ARRAY_AGG(asset_tangibility_i) as array_w, \n                              ARRAY_AGG(indu_2) as array_indu_2, \n                              stddev(asset_tangibility_i) as std_w \n                            FROM \n                              agg \n                            GROUP BY \n                              fake\n                          ) \n                        UNION \n                          (\n                            SELECT \n                              'account_paybable_to_asset' as w, \n                              AVG(account_paybable_to_asset_i) as avg, \n                              ARRAY_AGG(account_paybable_to_asset_i) as array_w, \n                              ARRAY_AGG(indu_2) as array_indu_2, \n                              stddev(account_paybable_to_asset_i) as std_w \n                            FROM \n                              agg \n                            GROUP BY \n                              fake\n                          )\n                      )\n                  ) CROSS \n                  JOIN UNNEST(zip_values) as t(names)\n              ) \n            GROUP BY \n              field0\n          )\n      )\n      ORDER BY indu_2\n  )\n", "schema": [{"Name": "indu_2", "Type": "string", "Comment": "Two digits industry. If length cic equals to 3, then add 0 to indu_2"}, {"Name": "receivable_curasset_i", "Type": "double", "Comment": "\u5e94\u6536\u5e10\u6b3e (c80) / cuasset"}, {"Name": "std_receivable_curasset_i", "Type": "double", "Comment": "standaridzed values (x - x mean) / std)"}, {"Name": "cash_over_curasset_i", "Type": "double", "Comment": "(\u5176\u4e2d\uff1a\u77ed\u671f\u6295\u8d44 (c79) - \u5e94\u6536\u5e10\u6b3e (c80) - \u5b58\u8d27 (c81) - \u5176\u4e2d\uff1a\u4ea7\u6210\u54c1 (c82)) /current asset"}, {"Name": "std_cash_over_curasset_i", "Type": "double", "Comment": "standaridzed values (x - x mean) / std)"}, {"Name": "working_capital_i", "Type": "double", "Comment": "cuasset- \u6d41\u52a8\u8d1f\u503a\u5408\u8ba1 (c95)"}, {"Name": "std_working_capital_i", "Type": "double", "Comment": "standaridzed values (x - x mean) / std)"}, {"Name": "working_capital_requirement_i", "Type": "double", "Comment": "\u5b58\u8d27 (c81) + \u5e94\u6536\u5e10\u6b3e (c80) - \u5e94\u4ed8\u5e10\u6b3e  (c96)"}, {"Name": "std_working_capital_requirement_i", "Type": "double", "Comment": "standaridzed values (x - x mean) / std)"}, {"Name": "current_ratio_i", "Type": "double", "Comment": "cuasset/\u6d41\u52a8\u8d1f\u503a\u5408\u8ba1 (c95)"}, {"Name": "std_current_ratio_i", "Type": "double", "Comment": "standaridzed values (x - x mean) / std)"}, {"Name": "quick_ratio_i", "Type": "double", "Comment": "(cuasset -  \u5176\u4e2d\uff1a\u77ed\u671f\u6295\u8d44 (c79) - \u5e94\u6536\u5e10\u6b3e (c80) - \u5b58\u8d27 (c81)) / \u6d41\u52a8\u8d1f\u503a\u5408\u8ba1 (c95)"}, {"Name": "std_quick_ratio_i", "Type": "double", "Comment": "standaridzed values (x - x mean) / std)"}, {"Name": "cash_ratio_i", "Type": "double", "Comment": "(1 - cuasset - \u5176\u4e2d\uff1a\u77ed\u671f\u6295\u8d44 (c79) - \u5e94\u6536\u5e10\u6b3e (c80) - \u5b58\u8d27 (c81) - \u5176\u4e2d\uff1a\u4ea7\u6210\u54c1 (c82))/ \u6d41\u52a8\u8d1f\u503a\u5408\u8ba1 (c95)"}, {"Name": "std_cash_ratio_i", "Type": "double", "Comment": "standaridzed values (x - x mean) / std)"}, {"Name": "liabilities_assets_i", "Type": "double", "Comment": "(\u6d41\u52a8\u8d1f\u503a\u5408\u8ba1 (c95) + \u957f\u671f\u8d1f\u503a\u5408\u8ba1 (c97)) / toasset"}, {"Name": "std_liabilities_assets_i", "Type": "double", "Comment": "standaridzed values (x - x mean) / std)"}, {"Name": "return_on_asset_i", "Type": "double", "Comment": "sales - (\u4e3b\u8425\u4e1a\u52a1\u6210\u672c (c108) + \u8425\u4e1a\u8d39\u7528 (c113) + \u7ba1\u7406\u8d39\u7528 (c114) + \u8d22\u4ea7\u4fdd\u9669\u8d39 (c116) + \u52b3\u52a8\u3001\u5931\u4e1a\u4fdd\u9669\u8d39 (c118)+ \u8d22\u52a1\u8d39\u7528 (c124) + \u672c\u5e74\u5e94\u4ed8\u5de5\u8d44\u603b\u989d (wage)) /toasset"}, {"Name": "std_return_on_asset_i", "Type": "double", "Comment": "standaridzed values (x - x mean) / std)"}, {"Name": "sales_assets_i", "Type": "double", "Comment": "\u5168\u5e74\u8425\u4e1a\u6536\u5165\u5408\u8ba1 (c64) /(\\Delta toasset/2)"}, {"Name": "std_sales_assets_i", "Type": "double", "Comment": "standaridzed values (x - x mean) / std)"}, {"Name": "sales_assets_andersen_i", "Type": "double", "Comment": "Sales over asset"}, {"Name": "std_sales_assets_andersen_i", "Type": "double", "Comment": "standaridzed values (x - x mean) / std)"}, {"Name": "account_paybable_to_asset_i", "Type": "double", "Comment": "(\\Delta \u5e94\u4ed8\u5e10\u6b3e  (c96))/ (\\Delta (toasset))"}, {"Name": "std_account_paybable_to_asset_i", "Type": "double", "Comment": "standaridzed values (x - x mean) / std)"}, {"Name": "asset_tangibility_i", "Type": "double", "Comment": "Total fixed assets - Intangible assets"}, {"Name": "std_asset_tangibility_i", "Type": "double", "Comment": "standaridzed values (x - x mean) / std)"}, {"Name": "rd_intensity_i", "Type": "double", "Comment": "rdfee/\u5168\u5e74\u8425\u4e1a\u6536\u5165\u5408\u8ba1 (c64)"}, {"Name": "std_rd_intensity_i", "Type": "double", "Comment": "standaridzed values (x - x mean) / std)"}, {"Name": "inventory_to_sales_i", "Type": "double", "Comment": "\u5b58\u8d27 (c81) / sales"}, {"Name": "std_inventory_to_sales_i", "Type": "double", "Comment": "standaridzed values (x - x mean) / std)"}], "partition_keys": ["indu_2"], "metadata": {"DatabaseName": "firms_survey", "TableName": "asif_industry_financial_ratio_industry", "target_S3URI": "s3://datalake-datascience/DATA/ECON/FIRM_SURVEY/ASIF_CHINA/TRANSFORMED/FINANCIAL_RATIO/INDUSTRY", "from_athena": "True"}}, {"step": 2, "description": "\nTransform (creating time-break variables and fixed effect) asif_financial_ratio data and merging pollution, industry and city mandate tables\n", "query": "\nCREATE TABLE environment.fin_dep_pollution_baseline_industry WITH (format = 'PARQUET') AS WITH aggregate_pol AS (\n  SELECT \n    year, \n    geocode4_corr, \n    provinces, \n    cityen, \n    ind2, \n    SUM(tso2) as tso2, \n    lower_location, \n    larger_location, \n    coastal \n  FROM \n    (\n      SELECT \n        year, \n        provinces, \n        citycode, \n        geocode4_corr, \n        china_city_sector_pollution.cityen, \n        ind2, \n        tso2, \n        lower_location, \n        larger_location, \n        coastal \n      FROM \n        environment.china_city_sector_pollution \n        INNER JOIN (\n          SELECT \n            extra_code, \n            geocode4_corr \n          FROM \n            chinese_lookup.china_city_code_normalised \n          GROUP BY \n            extra_code, \n            geocode4_corr\n        ) as no_dup_citycode ON china_city_sector_pollution.citycode = no_dup_citycode.extra_code\n    ) \n  GROUP BY \n    year, \n    provinces, \n    geocode4_corr, \n    cityen, \n    ind2, \n    lower_location, \n    larger_location, \n    coastal\n) \nSELECT \n  aggregate_pol.year, \n  CASE WHEN aggregate_pol.year in (\n    '2001', '2002', '2003', '2004', '2005'\n  ) THEN 'FALSE' WHEN aggregate_pol.year in ('2006', '2007') THEN 'TRUE' END AS period, \n  provinces, \n  cityen, \n  aggregate_pol.geocode4_corr, \n  CASE WHEN tcz IS NULL THEN '0' ELSE tcz END AS tcz, \n  CASE WHEN spz IS NULL OR spz = '#N/A' THEN '0' ELSE spz END AS spz, \n  aggregate_pol.ind2, \n  CASE WHEN short IS NULL THEN 'Unknown' ELSE short END AS short, \n  polluted_di, \n  polluted_mi, \n  polluted_mei, \n  tso2, \n  CAST(\n    tso2 AS DECIMAL(16, 5)\n  ) / CAST(\n    output AS DECIMAL(16, 5)\n  ) AS so2_intensity, \n  tso2_mandate_c, \n  in_10_000_tonnes, \n  CAST(\n    output AS DECIMAL(16, 5)\n  ) AS output, \n  CAST(\n    employment AS DECIMAL(16, 5)\n  ) AS employment, \n  CAST(\n    sales AS DECIMAL(16, 5)\n  ) AS sales, \n  CAST(\n    capital AS DECIMAL(16, 5)\n  ) AS capital, \n  CAST(\n    toasset AS DECIMAL(16, 5)\n  ) AS total_asset, \n  credit_constraint, \n  receivable_curasset_i,\n  std_receivable_curasset_i,\n  cash_over_curasset_i,\n  std_cash_over_curasset_i,\n  working_capital_i,\n  std_working_capital_i,\n  working_capital_requirement_i,\n  std_working_capital_requirement_i,\n  current_ratio_i,\n  std_current_ratio_i,\n  quick_ratio_i,\n  std_quick_ratio_i,\n  cash_ratio_i,\n  std_cash_ratio_i,\n  liabilities_assets_i,\n  std_liabilities_assets_i,\n  1 - liabilities_assets_i as reverse_liabilities_assets_i,\n  1 - std_liabilities_assets_i as std_reverse_liabilities_assets_i,\n  return_on_asset_i,\n  std_return_on_asset_i,\n  sales_assets_i,\n  std_sales_assets_i,\n  sales_assets_andersen_i,\n  std_sales_assets_andersen_i,\n  account_paybable_to_asset_i,\n  std_account_paybable_to_asset_i,\n  asset_tangibility_i,\n  std_asset_tangibility_i,\n  rd_intensity_i,\n  std_rd_intensity_i,\n  inventory_to_sales_i,\n  std_inventory_to_sales_i,\n  lower_location, \n  larger_location, \n  coastal, \n  DENSE_RANK() OVER (\n    ORDER BY \n      city_mandate.geocode4_corr, \n      aggregate_pol.ind2\n  ) AS fe_c_i, \n  DENSE_RANK() OVER (\n    ORDER BY \n      aggregate_pol.year, \n      aggregate_pol.ind2\n  ) AS fe_t_i, \n  DENSE_RANK() OVER (\n    ORDER BY \n      city_mandate.geocode4_corr, \n      aggregate_pol.year\n  ) AS fe_c_t \nFROM \n  aggregate_pol \n  INNER JOIN firms_survey.asif_industry_financial_ratio_industry ON aggregate_pol.ind2 = asif_industry_financial_ratio_industry.indu_2 \n  INNER JOIN (\n    SELECT \n      geocode4_corr, \n      tso2_mandate_c, \n      in_10_000_tonnes \n    FROM \n      policy.china_city_reduction_mandate \n      INNER JOIN chinese_lookup.china_city_code_normalised ON china_city_reduction_mandate.citycn = china_city_code_normalised.citycn \n    WHERE \n      extra_code = geocode4_corr\n  ) as city_mandate ON aggregate_pol.geocode4_corr = city_mandate.geocode4_corr \n  LEFT JOIN policy.china_city_tcz_spz ON aggregate_pol.geocode4_corr = china_city_tcz_spz.geocode4_corr \n  LEFT JOIN chinese_lookup.ind_cic_2_name ON aggregate_pol.ind2 = ind_cic_2_name.cic \n  LEFT JOIN (\n    SELECT \n      ind2, \n      polluted_di, \n      polluted_mi, \n      polluted_mei\n    FROM \n      \"environment\".\"china_sector_pollution_threshold\" \n    WHERE \n      year = '2001'\n  ) as polluted_sector ON aggregate_pol.ind2 = polluted_sector.ind2 \n  LEFT JOIN (\n    SELECT \n      cic, \n      financial_dep_china AS credit_constraint \n    FROM \n      industry.china_credit_constraint\n  ) as cred_constraint ON aggregate_pol.ind2 = cred_constraint.cic \n  LEFT JOIN (\n    SELECT \n      year, \n      geocode4_corr, \n      indu_2, \n      SUM(output) AS output, \n      SUM(employ) AS employment, \n      SUM(captal) AS capital,\n      SUM(sales) as sales,\n      SUM(toasset) as toasset\n    FROM \n      (\n        SELECT \n          year, \n          geocode4_corr, \n          CASE WHEN LENGTH(cic) = 4 THEN substr(cic, 1, 2) ELSE concat(\n            '0', \n            substr(cic, 1, 1)\n          ) END AS indu_2, \n          output, \n          employ, \n          captal,\n          sales,\n          toasset\n        FROM \n          firms_survey.asif_firms_prepared \n          INNER JOIN (\n            SELECT \n              extra_code, \n              geocode4_corr \n            FROM \n              chinese_lookup.china_city_code_normalised \n            GROUP BY \n              extra_code, \n              geocode4_corr\n          ) as no_dup_citycode ON asif_firms_prepared.citycode = no_dup_citycode.extra_code\n      ) \n    WHERE \n      year in (\n        '2001', '2002', '2003', '2004', '2005', \n        '2006', '2007'\n      ) \n    GROUP BY \n      geocode4_corr, \n      indu_2, \n      year\n  ) as agg_output ON aggregate_pol.geocode4_corr = agg_output.geocode4_corr \n  AND aggregate_pol.ind2 = agg_output.indu_2 \n  AND aggregate_pol.year = agg_output.year \nWHERE \n  tso2 > 4863 \n  AND output > 0 \n  and capital > 0 \n  and employment > 0\n  AND aggregate_pol.ind2 != '43'\n\n", "schema": [{"Name": "year", "Type": "string", "Comment": "year from 2001 to 2007"}, {"Name": "period", "Type": "varchar(5)", "Comment": "False if year before 2005 included, True if year 2006 and 2007"}, {"Name": "provinces", "Type": "string", "Comment": ""}, {"Name": "cityen", "Type": "string", "Comment": ""}, {"Name": "geocode4_corr", "Type": "string", "Comment": ""}, {"Name": "tcz", "Type": "string", "Comment": "Two control zone policy city"}, {"Name": "spz", "Type": "string", "Comment": "Special policy zone policy city"}, {"Name": "ind2", "Type": "string", "Comment": "2 digits industry"}, {"Name": "short", "Type": "string", "Comment": ""}, {"Name": "polluted_di", "Type": "varchar(5)", "Comment": "Sectors with values above Yearly 75th percentile of SO2 label as ABOVE else BELOW"}, {"Name": "polluted_mi", "Type": "varchar(5)", "Comment": "Sectors with values above Yearly average of SO2 label as ABOVE else BELOW"}, {"Name": "polluted_mei", "Type": "varchar(5)", "Comment": "Sectors with values above Yearly median of SO2 label as ABOVE else BELOW"}, {"Name": "tso2", "Type": "bigint", "Comment": "Total so2 city sector. Filtered values above  4863 (5% of the distribution)"}, {"Name": "so2_intensity", "Type": "decimal(21,5)", "Comment": "SO2 divided by output"}, {"Name": "tso2_mandate_c", "Type": "float", "Comment": "city reduction mandate in tonnes"}, {"Name": "in_10_000_tonnes", "Type": "float", "Comment": "city reduction mandate in 10k tonnes"}, {"Name": "output", "Type": "decimal(16,5)", "Comment": "Output"}, {"Name": "employment", "Type": "decimal(16,5)", "Comment": "Employemnt"}, {"Name": "sales", "Type": "decimal(16,5)", "Comment": "Sales"}, {"Name": "capital", "Type": "decimal(16,5)", "Comment": "Capital"}, {"Name": "total_asset", "Type": "decimal(16,5)", "Comment": "Total asset"}, {"Name": "credit_constraint", "Type": "float", "Comment": "Financial dependency. From paper https://www.sciencedirect.com/science/article/pii/S0147596715000311"}, {"Name": "receivable_curasset_i", "Type": "double", "Comment": "\u5e94\u6536\u5e10\u6b3e (c80) / cuasset"}, {"Name": "std_receivable_curasset_i", "Type": "double", "Comment": "standaridzed values (x - x mean) / std)"}, {"Name": "cash_over_curasset_i", "Type": "double", "Comment": "(\u5176\u4e2d\uff1a\u77ed\u671f\u6295\u8d44 (c79) - \u5e94\u6536\u5e10\u6b3e (c80) - \u5b58\u8d27 (c81) - \u5176\u4e2d\uff1a\u4ea7\u6210\u54c1 (c82)) /current asset"}, {"Name": "std_cash_over_curasset_i", "Type": "double", "Comment": "standaridzed values (x - x mean) / std)"}, {"Name": "working_capital_i", "Type": "double", "Comment": "cuasset- \u6d41\u52a8\u8d1f\u503a\u5408\u8ba1 (c95)"}, {"Name": "std_working_capital_i", "Type": "double", "Comment": "standaridzed values (x - x mean) / std)"}, {"Name": "working_capital_requirement_i", "Type": "double", "Comment": "\u5b58\u8d27 (c81) + \u5e94\u6536\u5e10\u6b3e (c80) - \u5e94\u4ed8\u5e10\u6b3e  (c96)"}, {"Name": "std_working_capital_requirement_i", "Type": "double", "Comment": "standaridzed values (x - x mean) / std)"}, {"Name": "current_ratio_i", "Type": "double", "Comment": "cuasset/\u6d41\u52a8\u8d1f\u503a\u5408\u8ba1 (c95)"}, {"Name": "std_current_ratio_i", "Type": "double", "Comment": "standaridzed values (x - x mean) / std)"}, {"Name": "quick_ratio_i", "Type": "double", "Comment": "(cuasset-\u5b58\u8d27 (c81) ) / \u6d41\u52a8\u8d1f\u503a\u5408\u8ba1 (c95)"}, {"Name": "std_quick_ratio_i", "Type": "double", "Comment": "standaridzed values (x - x mean) / std)"}, {"Name": "cash_ratio_i", "Type": "double", "Comment": "(cuasset -  \u5176\u4e2d\uff1a\u77ed\u671f\u6295\u8d44 (c79) - \u5e94\u6536\u5e10\u6b3e (c80) - \u5b58\u8d27 (c81)/ \u6d41\u52a8\u8d1f\u503a\u5408\u8ba1 (c95)"}, {"Name": "std_cash_ratio_i", "Type": "double", "Comment": "standaridzed values (x - x mean) / std)"}, {"Name": "liabilities_assets_i", "Type": "double", "Comment": "(\u6d41\u52a8\u8d1f\u503a\u5408\u8ba1 (c95) + \u957f\u671f\u8d1f\u503a\u5408\u8ba1 (c97)) / toasset"}, {"Name": "std_liabilities_assets_i", "Type": "double", "Comment": "standaridzed values (x - x mean) / std)"}, {"Name": "reverse_liabilities_assets_i", "Type": "double", "Comment": "1-liabilities_assets_i"}, {"Name": "std_reverse_liabilities_assets_i", "Type": "double", "Comment": "1 - standaridzed values (x - x mean) / std)"}, {"Name": "return_on_asset_i", "Type": "double", "Comment": "sales - (\u4e3b\u8425\u4e1a\u52a1\u6210\u672c (c108) + \u8425\u4e1a\u8d39\u7528 (c113) + \u7ba1\u7406\u8d39\u7528 (c114) + \u8d22\u4ea7\u4fdd\u9669\u8d39 (c116) + \u52b3\u52a8\u3001\u5931\u4e1a\u4fdd\u9669\u8d39 (c118)+ \u8d22\u52a1\u8d39\u7528 (c124) + \u672c\u5e74\u5e94\u4ed8\u5de5\u8d44\u603b\u989d (wage)) /toasset"}, {"Name": "std_return_on_asset_i", "Type": "double", "Comment": "standaridzed values (x - x mean) / std)"}, {"Name": "sales_assets_i", "Type": "double", "Comment": "\u5168\u5e74\u8425\u4e1a\u6536\u5165\u5408\u8ba1 (c64) /(\\Delta toasset/2)"}, {"Name": "std_sales_assets_i", "Type": "double", "Comment": "standaridzed values (x - x mean) / std)"}, {"Name": "sales_assets_andersen_i", "Type": "double", "Comment": "\u5168\u5e74\u8425\u4e1a\u6536\u5165\u5408\u8ba1 (c64) /(toasset)"}, {"Name": "std_sales_assets_andersen_i", "Type": "double", "Comment": "standaridzed values (x - x mean) / std)"}, {"Name": "account_paybable_to_asset_i", "Type": "double", "Comment": "(\\Delta \u5e94\u4ed8\u5e10\u6b3e  (c96))/ (\\Delta (toasset))"}, {"Name": "std_account_paybable_to_asset_i", "Type": "double", "Comment": "standaridzed values (x - x mean) / std)"}, {"Name": "asset_tangibility_i", "Type": "double", "Comment": "Total fixed assets - Intangible assets"}, {"Name": "std_asset_tangibility_i", "Type": "double", "Comment": "standaridzed values (x - x mean) / std)"}, {"Name": "rd_intensity_i", "Type": "double", "Comment": "rdfee/\u5168\u5e74\u8425\u4e1a\u6536\u5165\u5408\u8ba1 (c64)"}, {"Name": "std_rd_intensity_i", "Type": "double", "Comment": "standaridzed values (x - x mean) / std)"}, {"Name": "inventory_to_sales_i", "Type": "double", "Comment": "\u5b58\u8d27 (c81) / sales"}, {"Name": "std_inventory_to_sales_i", "Type": "double", "Comment": "standaridzed values (x - x mean) / std)"}, {"Name": "lower_location", "Type": "string", "Comment": "Location city. one of Coastal, Central, Northwest, Northeast, Southwest"}, {"Name": "larger_location", "Type": "string", "Comment": "Location city. one of Eastern, Central, Western"}, {"Name": "coastal", "Type": "string", "Comment": "City is bordered by sea or not"}, {"Name": "fe_c_i", "Type": "bigint", "Comment": "City industry fixed effect"}, {"Name": "fe_t_i", "Type": "bigint", "Comment": "year industry fixed effect"}, {"Name": "fe_c_t", "Type": "bigint", "Comment": "city industry fixed effect"}], "partition_keys": ["geocode4_corr", "year", "ind2"], "metadata": {"DatabaseName": "environment", "TableName": "fin_dep_pollution_baseline_industry", "target_S3URI": "s3://datalake-datascience/DATA/ENVIRONMENT/CHINA/FYP/FINANCIAL_CONTRAINT/PAPER_FYP_FINANCE_POL/BASELINE/INDUSTRY", "from_athena": "True"}}, {"step": 5, "description": "\nTransform asif firms prepared data by merging china tcz spz, china city reduction mandate, china city code normalised, china credit constraint, ind cic 2 name data by constructing financial ratio, city-industry FE, city-year FE, industry-year FE, soe_vs_private, foreign_vs_domestic (add firms ownership soe and private and domestic and foreign, keep capital, output, sales and employment) to asif financial ratio baseline firm\n", "query": "\nCREATE TABLE firms_survey.asif_financial_ratio_baseline_firm WITH (format = 'PARQUET') AS\nWITH test AS (\n  SELECT \n    *, \n    CASE WHEN LENGTH(cic) = 4 THEN substr(cic, 1, 2) ELSE concat(\n      '0', \n      substr(cic, 1, 1)\n    ) END AS indu_2, \n    c98 + c99 as total_asset, \n    CASE WHEN c79 IS NULL THEN 0 ELSE c79 END AS short_term_investment \n  FROM \n    firms_survey.asif_firms_prepared \n    INNER JOIN (\n      SELECT \n        extra_code, \n        geocode4_corr \n      FROM \n        chinese_lookup.china_city_code_normalised \n      GROUP BY \n        extra_code, \n        geocode4_corr\n    ) as no_dup_citycode ON asif_firms_prepared.citycode = no_dup_citycode.extra_code\n) \nSELECT \n  * \nFROM \n  (\n    WITH ratio AS (\n      SELECT \n        firm, \n        year, \n        cic, \n        indu_2, \n        geocode4_corr, \n        ownership, \n        CASE WHEN ownership = 'SOE' THEN 'SOE' ELSE 'PRIVATE' END AS soe_vs_pri, \n        CASE WHEN ownership in ('HTM', 'FOREIGN') THEN 'FOREIGN' ELSE 'DOMESTIC' END AS for_vs_dom, \n        CAST(\n          output AS DECIMAL(16, 5)\n        ) AS output, \n        CAST(\n          sales AS DECIMAL(16, 5)\n        ) AS sales, \n        CAST(\n          employ AS DECIMAL(16, 5)\n        ) AS employment, \n        CAST(\n          captal AS DECIMAL(16, 5)\n        ) AS capital, \n        CAST(\n          toasset AS DECIMAL(16, 5)\n        ) AS total_asset, \n        CAST(\n          cuasset AS DECIMAL(16, 5)\n        ) / NULLIF(\n          CAST(\n            c95 AS DECIMAL(16, 5)\n          ), \n          0\n        ) AS current_ratio_fcit, \n        CAST(\n          cuasset - short_term_investment - c80 - c81 AS DECIMAL(16, 5)\n        ) / NULLIF(\n          CAST(\n            c95 AS DECIMAL(16, 5)\n          ), \n          0\n        ) AS quick_ratio_fcit, \n        -- Need to add asset or debt when bs requirement not meet\n        CASE WHEN toasset - (c98 + c99) < 0 THEN CAST(\n          c95 + c97 AS DECIMAL(16, 5)\n        )/ NULLIF(\n          CAST(\n            toasset + ABS(\n              toasset - (c98 + c99)\n            ) AS DECIMAL(16, 5)\n          ), \n          0\n        ) WHEN toasset - (c98 + c99) > 0 THEN CAST(\n          c95 + c97 + toasset - (c98 + c99) AS DECIMAL(16, 5)\n        )/ NULLIF(\n          CAST(\n            toasset AS DECIMAL(16, 5)\n          ), \n          0\n        ) ELSE CAST(\n          c95 + c97 AS DECIMAL(16, 5)\n        )/ NULLIF(\n          CAST(\n            toasset AS DECIMAL(16, 5)\n          ), \n          0\n        ) END AS liabilities_assets_fcit, \n        CASE WHEN toasset - (c98 + c99) < 0 THEN CAST(\n          sales - (\n            c108 + c113 + c114 + c116 + c118 + c124 + wage\n          ) AS DECIMAL(16, 5)\n        )/ NULLIF(\n          CAST(\n            toasset + ABS(\n              toasset - (c98 + c99)\n            ) AS DECIMAL(16, 5)\n          ), \n          0\n        ) ELSE CAST(\n          sales - (\n            c108 + c113 + c114 + c116 + c118 + c124 + wage\n          ) AS DECIMAL(16, 5)\n        )/ NULLIF(\n          CAST(\n            toasset AS DECIMAL(16, 5)\n          ), \n          0\n        ) END AS return_on_asset_fcit, \n        CASE WHEN toasset - (c98 + c99) < 0 THEN CAST(\n          sales AS DECIMAL(16, 5)\n        )/ NULLIF(\n          CAST(\n            toasset + ABS(\n              toasset - (c98 + c99)\n            ) AS DECIMAL(16, 5)\n          ), \n          0\n        ) ELSE CAST(\n          sales AS DECIMAL(16, 5)\n        )/ NULLIF(\n          CAST(\n            toasset AS DECIMAL(16, 5)\n          ), \n          0\n        ) END AS sales_assets_andersen_fcit, \n        CASE WHEN toasset - (c98 + c99) < 0 THEN CAST(\n          cuasset - short_term_investment - c80 - c81 - c82 AS DECIMAL(16, 5)\n        )/ NULLIF(\n          CAST(\n            toasset + ABS(\n              toasset - (c98 + c99)\n            ) AS DECIMAL(16, 5)\n          ), \n          0\n        ) ELSE CAST(\n          cuasset - short_term_investment - c80 - c81 - c82 AS DECIMAL(16, 5)\n        )/ NULLIF(\n          CAST(\n            toasset AS DECIMAL(16, 5)\n          ), \n          0\n        ) END AS cash_over_totasset_fcit, \n        CAST(\n          tofixed - c92 AS DECIMAL(16, 5)\n        ) AS asset_tangibility_fcit, \n        'FAKE' AS fake \n      FROM \n        test \n      WHERE \n        year in (\n          '2000', '2001', '2002', '2003', '2004', \n          '2005', '2006', '2007'\n        )\n    ) \n    SELECT \n      ratio.firm, \n      ratio.year, \n      CASE WHEN ratio.year in (\n        '2001', '2002', '2003', '2004', '2005'\n      ) THEN 'FALSE' WHEN ratio.year in ('2006', '2007') THEN 'TRUE' END AS period, \n      ratio.cic, \n      ratio.indu_2, \n      CASE WHEN short IS NULL THEN 'Unknown' ELSE short END AS short, \n      ratio.geocode4_corr, \n      CASE WHEN tcz IS NULL THEN '0' ELSE tcz END AS tcz, \n      CASE WHEN spz IS NULL \n      OR spz = '#N/A' THEN '0' ELSE spz END AS spz, \n      ratio.ownership, \n      soe_vs_pri, \n      for_vs_dom, \n      tso2_mandate_c, \n      in_10_000_tonnes, \n      output, \n      employment, \n      capital, \n      sales, \n      total_asset, \n      credit_constraint, \n      d_credit_constraint, \n      asset_tangibility_fcit, \n      cash_over_totasset_fcit, \n      LAG(cash_over_totasset_fcit, 1) OVER (\n        PARTITION BY ratio.firm \n        ORDER BY \n          ratio.year\n      ) as lag_cash_over_totasset_fcit, \n      current_ratio_fcit, \n      LAG(current_ratio_fcit, 1) OVER (\n        PARTITION BY ratio.firm \n        ORDER BY \n          ratio.year\n      ) as lag_current_ratio_fcit, \n      quick_ratio_fcit, \n      LAG(quick_ratio_fcit, 1) OVER (\n        PARTITION BY ratio.firm \n        ORDER BY \n          ratio.year\n      ) as lag_quick_ratio_fcit, \n      liabilities_assets_fcit, \n      LAG(liabilities_assets_fcit, 1) OVER (\n        PARTITION BY ratio.firm \n        ORDER BY \n          ratio.year\n      ) as lag_liabilities_assets_fcit, \n      sales_assets_andersen_fcit, \n      return_on_asset_fcit, \n      CASE WHEN avg_asset_tangibility_f > avg_asset_tangibility_ci THEN 'LARGE' ELSE 'SMALL' END AS avg_size_asset_fci, \n      CASE WHEN avg_output_f > avg_output_ci THEN 'LARGE' ELSE 'SMALL' END AS avg_size_output_fci, \n      CASE WHEN avg_employment_f > avg_employment_ci THEN 'LARGE' ELSE 'SMALL' END AS avg_employment_fci, \n      CASE WHEN avg_capital_f > avg_capital_ci THEN 'LARGE' ELSE 'SMALL' END AS avg_size_capital_fci, \n      CASE WHEN avg_sales_f > avg_sales_ci THEN 'LARGE' ELSE 'SMALL' END AS avg_sales_fci, \n      MAP(\n        ARRAY[.5, \n        .75, \n        .90, \n        .95 ], \n        zip_with(\n          transform(\n            sequence(1, 4), \n            x -> avg_asset_tangibility_f\n          ), \n          pct_asset_tangibility_ci, \n          (x, y) -> x > y\n        )\n      ) AS size_asset_fci,\n      MAP(\n        ARRAY[.5, \n        .75, \n        .90, \n        .95 ], \n        zip_with(\n          transform(\n            sequence(1, 4), \n            x -> avg_asset_tangibility_f\n          ), \n          pct_asset_tangibility_c, \n          (x, y) -> x > y\n        )\n      ) AS size_asset_fc, \n      MAP(\n        ARRAY[.5, \n        .75, \n        .90, \n        .95 ], \n        zip_with(\n          transform(\n            sequence(1, 4), \n            x -> avg_asset_tangibility_f\n          ), \n          pct_asset_tangibility_i, \n          (x, y) -> x > y\n        )\n      ) AS size_asset_fi,\n      MAP(\n        ARRAY[.5, \n        .75, \n        .90, \n        .95 ], \n        zip_with(\n          transform(\n            sequence(1, 4), \n            x -> avg_output_f\n          ), \n          pct_output_ci, \n          (x, y) -> x > y\n        )\n      ) AS size_output_fci,\n      MAP(\n        ARRAY[.5, \n        .75, \n        .90, \n        .95 ], \n        zip_with(\n          transform(\n            sequence(1, 4), \n            x -> avg_output_f\n          ), \n          pct_output_c, \n          (x, y) -> x > y\n        )\n      ) AS size_output_fc,\n      MAP(\n        ARRAY[.5, \n        .75, \n        .90, \n        .95 ], \n        zip_with(\n          transform(\n            sequence(1, 4), \n            x -> avg_output_f\n          ), \n          pct_output_i, \n          (x, y) -> x > y\n        )\n      ) AS size_output_fi,\n      MAP(\n        ARRAY[.5, \n        .75, \n        .90, \n        .95 ], \n        zip_with(\n          transform(\n            sequence(1, 4), \n            x -> avg_employment_f\n          ), \n          pct_employment_ci, \n          (x, y) -> x > y\n        )\n      ) AS size_employment_fci, \n      MAP(\n        ARRAY[.5, \n        .75, \n        .90, \n        .95 ], \n        zip_with(\n          transform(\n            sequence(1, 4), \n            x -> avg_employment_f\n          ), \n          pct_employment_c, \n          (x, y) -> x > y\n        )\n      ) AS size_employment_fc, \n      MAP(\n        ARRAY[.5, \n        .75, \n        .90, \n        .95 ], \n        zip_with(\n          transform(\n            sequence(1, 4), \n            x -> avg_employment_f\n          ), \n          pct_employment_i, \n          (x, y) -> x > y\n        )\n      ) AS size_employment_fi, \n      MAP(\n        ARRAY[.5, \n        .75, \n        .90, \n        .95 ], \n        zip_with(\n          transform(\n            sequence(1, 4), \n            x -> avg_capital_f\n          ), \n          pct_capital_ci, \n          (x, y) -> x > y\n        )\n      ) AS size_capital_fci, \n      MAP(\n        ARRAY[.5, \n        .75, \n        .90, \n        .95 ], \n        zip_with(\n          transform(\n            sequence(1, 4), \n            x -> avg_capital_f\n          ), \n          pct_capital_c, \n          (x, y) -> x > y\n        )\n      ) AS size_capital_fc, \n      MAP(\n        ARRAY[.5, \n        .75, \n        .90, \n        .95 ], \n        zip_with(\n          transform(\n            sequence(1, 4), \n            x -> avg_capital_f\n          ), \n          pct_capital_i, \n          (x, y) -> x > y\n        )\n      ) AS size_capital_fi, \n      MAP(\n        ARRAY[.5, \n        .75, \n        .90, \n        .95 ], \n        zip_with(\n          transform(\n            sequence(1, 4), \n            x -> avg_sales_f\n          ), \n          pct_sales_ci, \n          (x, y) -> x > y\n        )\n      ) AS size_sales_fci, \n      MAP(\n        ARRAY[.5, \n        .75, \n        .90, \n        .95 ], \n        zip_with(\n          transform(\n            sequence(1, 4), \n            x -> avg_sales_f\n          ), \n          pct_sales_c, \n          (x, y) -> x > y\n        )\n      ) AS size_sales_fc,\n      MAP(\n        ARRAY[.5, \n        .75, \n        .90, \n        .95 ], \n        zip_with(\n          transform(\n            sequence(1, 4), \n            x -> avg_sales_f\n          ), \n          pct_sales_i, \n          (x, y) -> x > y\n        )\n      ) AS size_sales_fi,\n      DENSE_RANK() OVER (\n        ORDER BY \n          ratio.geocode4_corr, \n          ratio.cic\n      ) AS fe_c_i, \n      DENSE_RANK() OVER (\n        ORDER BY \n          ratio.year, \n          ratio.cic\n      ) AS fe_t_i, \n      DENSE_RANK() OVER (\n        ORDER BY \n          ratio.geocode4_corr, \n          ratio.year\n      ) AS fe_c_t \n    FROM \n      ratio \n      INNER JOIN (\n        SELECT \n          firm, \n          COUNT(\n            DISTINCT(geocode4_corr)\n          ) AS count_city \n        FROM \n          ratio \n        GROUP BY \n          firm\n      ) as multi_cities ON ratio.firm = multi_cities.firm \n      INNER JOIN (\n        SELECT \n          firm, \n          COUNT(\n            DISTINCT(ownership)\n          ) AS count_ownership \n        FROM \n          ratio \n        GROUP BY \n          firm\n      ) as multi_ownership ON ratio.firm = multi_ownership.firm \n      INNER JOIN (\n        SELECT \n          firm, \n          COUNT(\n            DISTINCT(cic)\n          ) AS count_industry \n        FROM \n          ratio \n        GROUP BY \n          firm\n      ) as multi_industry ON ratio.firm = multi_industry.firm -- Pollution\n      INNER JOIN (\n        SELECT \n          year, \n          geocode4_corr, \n          provinces, \n          cityen, \n          indus_code AS cic, \n          SUM(tso2) as tso2, \n          lower_location, \n          larger_location, \n          coastal \n        FROM \n          (\n            SELECT \n              year, \n              provinces, \n              citycode, \n              geocode4_corr, \n              china_city_sector_pollution.cityen, \n              indus_code, \n              tso2, \n              lower_location, \n              larger_location, \n              coastal \n            FROM \n              environment.china_city_sector_pollution \n              INNER JOIN (\n                SELECT \n                  extra_code, \n                  geocode4_corr \n                FROM \n                  chinese_lookup.china_city_code_normalised \n                GROUP BY \n                  extra_code, \n                  geocode4_corr\n              ) as no_dup_citycode ON china_city_sector_pollution.citycode = no_dup_citycode.extra_code\n          ) \n        GROUP BY \n          year, \n          provinces, \n          geocode4_corr, \n          cityen, \n          indus_code, \n          lower_location, \n          larger_location, \n          coastal\n      ) as aggregate_pol ON ratio.year = aggregate_pol.year \n      AND ratio.geocode4_corr = aggregate_pol.geocode4_corr \n      AND ratio.cic = aggregate_pol.cic \n      INNER JOIN (\n        SELECT \n          geocode4_corr, \n          tso2_mandate_c, \n          in_10_000_tonnes \n        FROM \n          policy.china_city_reduction_mandate \n          INNER JOIN chinese_lookup.china_city_code_normalised ON china_city_reduction_mandate.citycn = china_city_code_normalised.citycn \n        WHERE \n          extra_code = geocode4_corr\n      ) as city_mandate ON ratio.geocode4_corr = city_mandate.geocode4_corr \n      LEFT JOIN policy.china_city_tcz_spz ON ratio.geocode4_corr = china_city_tcz_spz.geocode4_corr \n      LEFT JOIN chinese_lookup.ind_cic_2_name ON ratio.indu_2 = ind_cic_2_name.cic \n      LEFT JOIN (\n        SELECT \n          cic, \n          financial_dep_china AS credit_constraint, \n          CASE WHEN financial_dep_china > -.47 THEN 'ABOVE' ELSE 'BELOW' END AS d_credit_constraint \n        FROM \n          industry.china_credit_constraint\n      ) as cred_constraint ON ratio.indu_2 = cred_constraint.cic \n      LEFT JOIN (\n        SELECT \n          -- fake, \n          geocode4_corr, \n          indu_2,\n          approx_percentile(\n            avg_asset_tangibility_f, ARRAY[.5, \n            .75,.90,.95]\n          ) as pct_asset_tangibility_ci, \n          AVG(avg_asset_tangibility_f) AS avg_asset_tangibility_ci, \n          approx_percentile(\n            avg_output_f, ARRAY[.5,.75,.90,.95]\n          ) as pct_output_ci, \n          AVG(avg_output_f) AS avg_output_ci, \n          approx_percentile(\n            avg_employment_f, ARRAY[.5,.75,.90, \n            .95]\n          ) as pct_employment_ci, \n          AVG(avg_employment_f) AS avg_employment_ci, \n          approx_percentile(\n            avg_capital_f, ARRAY[.5,.75,.90, \n            .95]\n          ) as pct_capital_ci, \n          AVG(avg_capital_f) AS avg_capital_ci, \n          approx_percentile(\n            avg_sales_f, ARRAY[.5,.75,.90,.95]\n          ) as pct_sales_ci, \n          AVG(avg_sales_f) AS avg_sales_ci \n        FROM \n          (\n            SELECT \n              firm, \n              geocode4_corr,\n              indu_2,\n              -- fake, \n              AVG(asset_tangibility_fcit) as avg_asset_tangibility_f, \n              AVG(output) as avg_output_f, \n              AVG(employment) as avg_employment_f, \n              AVG(capital) as avg_capital_f, \n              AVG(sales) as avg_sales_f \n            FROM \n              ratio \n            GROUP BY \n              -- fake, \n              firm,\n              geocode4_corr,\n              indu_2\n          ) \n        GROUP BY \n          -- fake\n          geocode4_corr, \n          indu_2\n      ) as pct_ci ON ratio.geocode4_corr = pct_ci.geocode4_corr \n    AND ratio.indu_2 = pct_ci.indu_2\n    LEFT JOIN (\n        SELECT \n          -- fake, \n          geocode4_corr, \n          approx_percentile(\n            avg_asset_tangibility_f, ARRAY[.5, \n            .75,.90,.95]\n          ) as pct_asset_tangibility_c, \n          AVG(avg_asset_tangibility_f) AS avg_asset_tangibility_c, \n          approx_percentile(\n            avg_output_f, ARRAY[.5,.75,.90,.95]\n          ) as pct_output_c, \n          AVG(avg_output_f) AS avg_output_c, \n          approx_percentile(\n            avg_employment_f, ARRAY[.5,.75,.90, \n            .95]\n          ) as pct_employment_c, \n          AVG(avg_employment_f) AS avg_employment_c, \n          approx_percentile(\n            avg_capital_f, ARRAY[.5,.75,.90, \n            .95]\n          ) as pct_capital_c, \n          AVG(avg_capital_f) AS avg_capital_c, \n          approx_percentile(\n            avg_sales_f, ARRAY[.5,.75,.90,.95]\n          ) as pct_sales_c, \n          AVG(avg_sales_f) AS avg_sales_c\n        FROM \n          (\n            SELECT \n              firm, \n              geocode4_corr,\n              -- fake, \n              AVG(asset_tangibility_fcit) as avg_asset_tangibility_f, \n              AVG(output) as avg_output_f, \n              AVG(employment) as avg_employment_f, \n              AVG(capital) as avg_capital_f, \n              AVG(sales) as avg_sales_f \n            FROM \n              ratio \n            GROUP BY \n              -- fake, \n              firm,\n              geocode4_corr\n          ) \n        GROUP BY \n          -- fake\n          geocode4_corr\n      ) as pct_c ON ratio.geocode4_corr = pct_c.geocode4_corr\n      LEFT JOIN (\n        SELECT \n          -- fake, \n          indu_2, \n          approx_percentile(\n            avg_asset_tangibility_f, ARRAY[.5, \n            .75,.90,.95]\n          ) as pct_asset_tangibility_i, \n          AVG(avg_asset_tangibility_f) AS avg_asset_tangibility_i, \n          approx_percentile(\n            avg_output_f, ARRAY[.5,.75,.90,.95]\n          ) as pct_output_i, \n          AVG(avg_output_f) AS avg_output_i, \n          approx_percentile(\n            avg_employment_f, ARRAY[.5,.75,.90, \n            .95]\n          ) as pct_employment_i, \n          AVG(avg_employment_f) AS avg_employment_i, \n          approx_percentile(\n            avg_capital_f, ARRAY[.5,.75,.90, \n            .95]\n          ) as pct_capital_i, \n          AVG(avg_capital_f) AS avg_capital_i, \n          approx_percentile(\n            avg_sales_f, ARRAY[.5,.75,.90,.95]\n          ) as pct_sales_i, \n          AVG(avg_sales_f) AS avg_sales_i\n        FROM \n          (\n            SELECT \n              firm, \n              indu_2,\n              -- fake, \n              AVG(asset_tangibility_fcit) as avg_asset_tangibility_f, \n              AVG(output) as avg_output_f, \n              AVG(employment) as avg_employment_f, \n              AVG(capital) as avg_capital_f, \n              AVG(sales) as avg_sales_f \n            FROM \n              ratio \n            GROUP BY \n              -- fake, \n              firm,\n              indu_2\n          ) \n        GROUP BY \n          -- fake\n          indu_2\n      ) as pct_i ON ratio.indu_2 = pct_i.indu_2 \n      INNER JOIN (\n        SELECT \n          firm, \n          -- fake, \n          AVG(asset_tangibility_fcit) as avg_asset_tangibility_f,\n          AVG(output) as avg_output_f, \n          AVG(employment) as avg_employment_f, \n          AVG(capital) as avg_capital_f, \n          AVG(sales) as avg_sales_f\n        FROM \n          ratio \n        GROUP BY \n          -- fake, \n          firm\n      ) as firm_avg ON ratio.firm = firm_avg.firm\n    WHERE \n      count_ownership = 1 \n      AND count_city = 1 \n      AND count_industry = 1 \n      AND output > 0 \n      and capital > 0 \n      and employment > 0 \n      AND ratio.indu_2 != '43' \n      AND total_asset IS NOT NULL \n      AND asset_tangibility_fcit > 0 \n      AND cash_over_totasset_fcit > 0 \n      AND sales_assets_andersen_fcit IS NOT NULL \n      AND return_on_asset_fcit IS NOT NULL \n      AND liabilities_assets_fcit > 0 \n      AND quick_ratio_fcit > 0 \n      AND current_ratio_fcit > 0 \n      AND ratio.year in (\n        '2001', '2002', '2003', '2004', '2005', \n        '2006', '2007'\n      ) \n    ORDER BY \n      year \n  )\n", "schema": [{"Name": "firm", "Type": "string", "Comment": "Firms ID"}, {"Name": "year", "Type": "string", "Comment": ""}, {"Name": "period", "Type": "varchar(5)", "Comment": "if year prior to 2006 then False else true. Indicate break from 10 and 11 FYP"}, {"Name": "cic", "Type": "string", "Comment": "4 digits industry code"}, {"Name": "indu_2", "Type": "string", "Comment": "Two digits industry. If length cic equals to 3, then add 0 to indu_2"}, {"Name": "short", "Type": "string", "Comment": "Industry short description"}, {"Name": "geocode4_corr", "Type": "string", "Comment": "city code"}, {"Name": "tcz", "Type": "string", "Comment": "Two control zone policy"}, {"Name": "spz", "Type": "string", "Comment": "Special policy zone"}, {"Name": "ownership", "Type": "string", "Comment": "Firms ownership"}, {"Name": "soe_vs_pri", "Type": "varchar(7)", "Comment": "SOE vs PRIVATE"}, {"Name": "for_vs_dom", "Type": "varchar(8)", "Comment": " FOREIGN vs DOMESTICT if ownership is HTM then FOREIGN"}, {"Name": "tso2_mandate_c", "Type": "float", "Comment": "city reduction mandate in tonnes"}, {"Name": "in_10_000_tonnes", "Type": "float", "Comment": "city reduction mandate in 10k tonnes"}, {"Name": "output", "Type": "decimal(16,5)", "Comment": "Output"}, {"Name": "employment", "Type": "decimal(16,5)", "Comment": "employment"}, {"Name": "capital", "Type": "decimal(16,5)", "Comment": "capital"}, {"Name": "sales", "Type": "decimal(16,5)", "Comment": "sales"}, {"Name": "total_asset", "Type": "decimal(16,5)", "Comment": "Total asset"}, {"Name": "credit_constraint", "Type": "float", "Comment": "Financial dependency. From paper https://www.sciencedirect.com/science/article/pii/S0147596715000311"}, {"Name": "d_credit_constraint", "Type": "varchar(5)", "Comment": "Sectors financially dependant when above median"}, {"Name": "asset_tangibility_fcit", "Type": "decimal(16,5)", "Comment": "Total fixed assets - Intangible assets"}, {"Name": "cash_over_totasset_fcit", "Type": "decimal(21,5)", "Comment": "cuasset - short_term_investment - c80 - c81 - c82 divided by toasset"}, {"Name": "lag_cash_over_totasset_fcit", "Type": "decimal(21,5)", "Comment": "lag cash over total asset"}, {"Name": "current_ratio_fcit", "Type": "decimal(21,5)", "Comment": "cuasset/\u6d41\u52a8\u8d1f\u503a\u5408\u8ba1 (c95)"}, {"Name": "lag_current_ratio_fcit", "Type": "decimal(21,5)", "Comment": "lag current ratio"}, {"Name": "quick_ratio_fcit", "Type": "decimal(21,5)", "Comment": "(cuasset-\u5b58\u8d27 (c81) ) / \u6d41\u52a8\u8d1f\u503a\u5408\u8ba1 (c95)"}, {"Name": "lag_quick_ratio_fcit", "Type": "decimal(21,5)", "Comment": "lag quick ratio"}, {"Name": "liabilities_assets_fcit", "Type": "decimal(21,5)", "Comment": "(\u6d41\u52a8\u8d1f\u503a\u5408\u8ba1 (c95) + \u957f\u671f\u8d1f\u503a\u5408\u8ba1 (c97)) / toasset"}, {"Name": "lag_liabilities_assets_fcit", "Type": "decimal(21,5)", "Comment": "lag liabilities over total asset"}, {"Name": "sales_assets_andersen_fcit", "Type": "decimal(21,5)", "Comment": "Sales divided by total asset"}, {"Name": "return_on_asset_fcit", "Type": "decimal(21,5)", "Comment": "sales - (\u4e3b\u8425\u4e1a\u52a1\u6210\u672c (c108) + \u8425\u4e1a\u8d39\u7528 (c113) + \u7ba1\u7406\u8d39\u7528 (c114) + \u8d22\u4ea7\u4fdd\u9669\u8d39 (c116) + \u52b3\u52a8\u3001\u5931\u4e1a\u4fdd\u9669\u8d39 (c118)+ \u8d22\u52a1\u8d39\u7528 (c124) + \u672c\u5e74\u5e94\u4ed8\u5de5\u8d44\u603b\u989d (wage)) /toasset"}, {"Name": "avg_size_asset_f", "Type": "varchar(5)", "Comment": "if firm s asset tangibility average is above average of firm s average then firm is large"}, {"Name": "avg_size_output_f", "Type": "varchar(5)", "Comment": "if firm s ouptut average is above average of firm s average then firm is large"}, {"Name": "avg_employment_f", "Type": "varchar(5)", "Comment": "if firm s employment average is above average of firm s average then firm is large"}, {"Name": "avg_size_capital_f", "Type": "varchar(5)", "Comment": "if firm s capital average is above average of firm s average then firm is large"}, {"Name": "avg_sales_f", "Type": "varchar(5)", "Comment": "if firm s sale is above average of firm s average then firm is large"}, {"Name": "size_asset_fci", "Type": "map<double,boolean>", "Comment": "if firm s asset tangibility average is above average of firm city industry s decile then firm is large"}, {"Name": "size_asset_fc", "Type": "map<double,boolean>", "Comment": "if firm s asset tangibility average is above average of firm s city decile then firm is large"}, {"Name": "size_asset_fi", "Type": "map<double,boolean>", "Comment": "if firm s asset tangibility average is above average of firm s industry decile then firm is large"}, {"Name": "size_output_fci", "Type": "map<double,boolean>", "Comment": "if firm s ouptut average is above average of firm s city industry decile then firm is large"}, {"Name": "size_output_fc", "Type": "map<double,boolean>", "Comment": "if firm s ouptut average is above average of firm s city decile then firm is large"}, {"Name": "size_output_fi", "Type": "map<double,boolean>", "Comment": "if firm s ouptut average is above average of firm s industry decile then firm is large"}, {"Name": "size_employment_fci", "Type": "map<double,boolean>", "Comment": "if firm s employment average is above average of firm s city industry decile then firm is large"}, {"Name": "size_employment_fc", "Type": "map<double,boolean>", "Comment": "if firm s employment average is above average of firm s city decile then firm is large"}, {"Name": "size_employment_fi", "Type": "map<double,boolean>", "Comment": "if firm s employment average is above average of firm s industry decile then firm is large"}, {"Name": "size_capital_fci", "Type": "map<double,boolean>", "Comment": "if firm s capital average is above average of firm s city industry decile then firm is large"}, {"Name": "size_capital_fc", "Type": "map<double,boolean>", "Comment": "if firm s capital average is above average of firm s city decile then firm is large"}, {"Name": "size_capital_fi", "Type": "map<double,boolean>", "Comment": "if firm s capital average is above average of firm s industry decile then firm is large"}, {"Name": "size_sales_fci", "Type": "map<double,boolean>", "Comment": "if firm s sale is above average of firm s city industry decile then firm is large"}, {"Name": "size_sales_fc", "Type": "map<double,boolean>", "Comment": "if firm s sale is above average of firm s city decile then firm is large"}, {"Name": "size_sales_fi", "Type": "map<double,boolean>", "Comment": "if firm s sale is above average of firm s industry decile then firm is large"}, {"Name": "fe_c_i", "Type": "bigint", "Comment": "City industry fixed effect"}, {"Name": "fe_t_i", "Type": "bigint", "Comment": "year industry fixed effect"}, {"Name": "fe_c_t", "Type": "bigint", "Comment": "city industry fixed effect"}], "partition_keys": ["firm", "year", "cic", "geocode4_corr"], "metadata": {"DatabaseName": "firms_survey", "TableName": "asif_financial_ratio_baseline_firm", "target_S3URI": "s3://datalake-datascience/DATA/ECON/FIRM_SURVEY/ASIF_CHINA/TRANSFORMED/FINANCIAL_RATIO/FIRM", "from_athena": "True"}}, {"step": 7, "description": "\nTransform asif firms prepared data by merging china city code normalised data by constructing foreign_vs_domestic, foreign_size, domestic_size, private_size, public_size, soe_vs_private (create dominated industry by ownership (public-private, foreign-domestic) using industry size) to asif industry characteristics  ownership\n", "query": "\nCREATE TABLE firms_survey.asif_industry_characteristics_ownership WITH (format = 'PARQUET') AS\nWITH test AS (\n  SELECT \n    *, \n    CASE WHEN LENGTH(cic) = 4 THEN substr(cic, 1, 2) ELSE concat(\n      '0', \n      substr(cic, 1, 1)\n    ) END AS indu_2, \n    CASE WHEN ownership = 'SOE' THEN 'SOE' ELSE 'PRIVATE' END AS soe_vs_pri, \n    CASE WHEN ownership in ('HTM', 'FOREIGN') THEN 'FOREIGN' ELSE 'DOMESTIC' END AS for_vs_dom \n  FROM \n    firms_survey.asif_firms_prepared \n    INNER JOIN (\n      SELECT \n        extra_code, \n        geocode4_corr \n      FROM \n        chinese_lookup.china_city_code_normalised \n      GROUP BY \n        extra_code, \n        geocode4_corr\n    ) as no_dup_citycode ON asif_firms_prepared.citycode = no_dup_citycode.extra_code \n    WHERE year in ('2001', '2002', '2003','2004', '2005', '2006', '2007')\n) \nSELECT \n  national.indu_2, \n  national.geocode4_corr, \n  MAP(\n    ARRAY[.5, \n    .75, \n    .90, \n    .95 ], \n    zip_with(\n      c_med_output, \n      ci_med_output, \n      (x, y) -> x < y\n    )\n  ) AS dominated_output_i, \n  MAP(\n    ARRAY[.5, \n    .75, \n    .90, \n    .95 ], \n    zip_with(\n      c_med_employ, \n      ci_med_employ, \n      (x, y) -> x < y\n    )\n  ) AS dominated_employ_i, \n  MAP(\n    ARRAY[.5, \n    .75, \n    .90, \n    .95 ], \n    zip_with(\n      c_med_sales, \n      ci_med_sales, \n      (x, y) -> x < y\n    )\n  ) AS dominated_sales_i, \n  MAP(\n    ARRAY[.5, \n    .75, \n    .90, \n    .95 ], \n    zip_with(\n      c_med_captal, \n      ci_med_captal, \n      (x, y) -> x < y\n    )\n  ) AS dominated_capital_i, \n  dominated_output_soe AS dominated_output_soe_i, \n  dominated_employment_soe AS dominated_employment_soe_i, \n  dominated_sales_soe AS dominated_sales_soe_i, \n  dominated_capital_soe AS dominated_capital_soe_i, \n  dominated_output_for AS dominated_output_for_i, \n  dominated_employment_for AS dominated_employment_for_i, \n  dominated_sales_for AS dominated_sales_for_i, \n  dominated_capital_for AS dominated_capital_for_i \nFROM \n  (\n    (\n      SELECT \n        indu_2, \n--        year, \n        geocode4_corr AS geo, \n        -- rename to avoid ambiguous name\n        approx_percentile(output, ARRAY[.5,.75,.90,.95]) AS ci_med_output, \n        approx_percentile(employ, ARRAY[.5,.75,.90,.95]) AS ci_med_employ, \n        approx_percentile(sales, ARRAY[.5,.75,.90,.95]) AS ci_med_sales, \n        approx_percentile(captal, ARRAY[.5,.75,.90,.95]) AS ci_med_captal \n      FROM \n        test \n      GROUP BY \n--        year, \n        indu_2, \n        geocode4_corr\n    ) as industry_pct \n    LEFT JOIN (\n      SELECT \n--        year, \n        geocode4_corr, \n        approx_percentile(output, ARRAY[.5,.75,.90,.95]) as c_med_output, \n        approx_percentile(employ, ARRAY[.5,.75,.90,.95]) as c_med_employ, \n        approx_percentile(sales, ARRAY[.5,.75,.90,.95]) as c_med_sales, \n        approx_percentile(captal, ARRAY[.5,.75,.90,.95]) as c_med_captal \n      FROM \n        test \n      GROUP BY \n--        year, \n        geocode4_corr\n    ) as national_avg ON --industry_pct.year = national_avg.year \n--    AND \n    industry_pct.geo = national_avg.geocode4_corr\n  ) AS national \n  LEFT JOIN (\n    SELECT \n      * \n    FROM \n      (\n        WITH mapping AS (\n          SELECT \n            indu_2, \n            geocode4_corr, \n            map_agg(soe_vs_pri, output) AS output, \n            map_agg(soe_vs_pri, employ) AS employ, \n            map_agg(soe_vs_pri, sales) AS sales, \n            map_agg(soe_vs_pri, captal) AS captal \n          FROM \n            (\n              SELECT \n                geocode4_corr, \n                indu_2, \n                soe_vs_pri, \n                approx_percentile(output, ARRAY[.5,.75,.90,.95]) AS output, \n                approx_percentile(employ, ARRAY[.5,.75,.90,.95]) AS employ, \n                approx_percentile(sales, ARRAY[.5,.75,.90,.95]) AS sales, \n                approx_percentile(captal, ARRAY[.5,.75,.90,.95]) AS captal \n              FROM \n                test \n              GROUP BY \n                geocode4_corr, \n                indu_2, \n                soe_vs_pri\n            ) \n          GROUP BY \n            geocode4_corr, \n            indu_2\n        ) \n        SELECT \n          *, \n          map(\n            ARRAY[.5, \n            .75, \n            .90, \n            .95 ], \n            map_values(\n              transform_values(\n                MAP(\n                  output[ 'SOE' ], output[ 'PRIVATE' ]\n                ), \n                (k, v) -> k > v\n              )\n            )\n          ) AS dominated_output_soe, \n          map(\n            ARRAY[.5, \n            .75, \n            .90, \n            .95 ], \n            map_values(\n              transform_values(\n                MAP(\n                  employ[ 'SOE' ], employ[ 'PRIVATE' ]\n                ), \n                (k, v) -> k > v\n              )\n            )\n          ) AS dominated_employment_soe, \n          map(\n            ARRAY[.5, \n            .75, \n            .90, \n            .95 ], \n            map_values(\n              transform_values(\n                MAP(sales[ 'SOE' ], sales[ 'PRIVATE' ]), \n                (k, v) -> k > v\n              )\n            )\n          ) AS dominated_sales_soe, \n          map(\n            ARRAY[.5, \n            .75, \n            .90, \n            .95 ], \n            map_values(\n              transform_values(\n                MAP(\n                  captal[ 'SOE' ], captal[ 'PRIVATE' ]\n                ), \n                (k, v) -> k > v\n              )\n            )\n          ) AS dominated_capital_soe \n        FROM \n          mapping\n      )\n  ) AS soe_private ON national.indu_2 = soe_private.indu_2 \n  AND national.geocode4_corr = soe_private.geocode4_corr \n  LEFT JOIN (\n    SELECT \n      * \n    FROM \n      (\n        WITH mapping AS (\n          SELECT \n            indu_2, \n            geocode4_corr, \n            map_agg(for_vs_dom, output) AS output, \n            map_agg(for_vs_dom, employ) AS employ, \n            map_agg(for_vs_dom, sales) AS sales, \n            map_agg(for_vs_dom, captal) AS captal \n          FROM \n            (\n              SELECT \n                geocode4_corr, \n                indu_2, \n                for_vs_dom, \n                approx_percentile(output, ARRAY[.5,.75,.90,.95]) as output, \n                approx_percentile(employ, ARRAY[.5,.75,.90,.95]) AS employ, \n                approx_percentile(sales, ARRAY[.5,.75,.90,.95]) AS sales, \n                approx_percentile(captal, ARRAY[.5,.75,.90,.95]) AS captal \n              FROM \n                test \n              GROUP BY \n                geocode4_corr, \n                indu_2, \n                for_vs_dom\n            ) \n          GROUP BY \n            geocode4_corr, \n            indu_2\n        ) \n        SELECT \n          *, \n          map(\n            ARRAY[.5, \n            .75, \n            .90, \n            .95 ], \n            map_values(\n              transform_values(\n                MAP(\n                  output[ 'FOREIGN' ], output[ 'DOMESTIC' ]\n                ), \n                (k, v) -> k > v\n              )\n            )\n          ) AS dominated_output_for, \n          map(\n            ARRAY[.5, \n            .75, \n            .90, \n            .95 ], \n            map_values(\n              transform_values(\n                MAP(\n                  employ[ 'FOREIGN' ], employ[ 'DOMESTIC' ]\n                ), \n                (k, v) -> k > v\n              )\n            )\n          ) AS dominated_employment_for, \n          map(\n            ARRAY[.5, \n            .75, \n            .90, \n            .95 ], \n            map_values(\n              transform_values(\n                MAP(\n                  sales[ 'FOREIGN' ], sales[ 'DOMESTIC' ]\n                ), \n                (k, v) -> k > v\n              )\n            )\n          ) AS dominated_sales_for, \n          map(\n            ARRAY[.5, \n            .75, \n            .90, \n            .95 ], \n            map_values(\n              transform_values(\n                MAP(\n                  captal[ 'FOREIGN' ], captal[ 'DOMESTIC' ]\n                ), \n                (k, v) -> k > v\n              )\n            )\n          ) AS dominated_capital_for \n        FROM \n          mapping\n      )\n  ) AS foreign_dom ON national.indu_2 = foreign_dom.indu_2 \n  AND national.geocode4_corr = foreign_dom.geocode4_corr \n", "schema": [{"Name": "indu_2", "Type": "string", "Comment": ""}, {"Name": "geocode4_corr", "Type": "string", "Comment": "city code"}, {"Name": "dominated_output_i", "Type": "map<double,boolean>", "Comment": "map with information dominated industry knowing percentile .5, .75, .9, .95 of output"}, {"Name": "dominated_employment_i", "Type": "map<double,boolean>", "Comment": "map with information on dominated industry knowing percentile .5, .75, .9, .95 of employment"}, {"Name": "dominated_capital_i", "Type": "map<double,boolean>", "Comment": "map with information on dominated industry knowing percentile .5, .75, .9, .95 of capital"}, {"Name": "dominated_sales_i", "Type": "map<double,boolean>", "Comment": "map with information on SOE dominated industry knowing percentile .5, .75, .9, .95 of sales"}, {"Name": "dominated_output_soe_i", "Type": "map<double,boolean>", "Comment": "map with information on SOE dominated industry knowing percentile .5, .75, .9, .95 of output"}, {"Name": "dominated_employment_soe_i", "Type": "map<double,boolean>", "Comment": "map with information on SOE dominated industry knowing percentile .5, .75, .9, .95 of employment"}, {"Name": "dominated_sales_soe_i", "Type": "map<double,boolean>", "Comment": "map with information on SOE dominated industry knowing percentile .5, .75, .9, .95 of sales"}, {"Name": "dominated_capital_soe_i", "Type": "map<double,boolean>", "Comment": "map with information on SOE dominated industry knowing percentile .5, .75, .9, .95 of capital"}, {"Name": "dominated_output_for_i", "Type": "map<double,boolean>", "Comment": "map with information on foreign dominated industry knowing percentile .5, .75, .9, .95 of output"}, {"Name": "dominated_employment_for_i", "Type": "map<double,boolean>", "Comment": "map with information on foreign dominated industry knowing percentile .5, .75, .9, .95 of employment"}, {"Name": "dominated_sales_for_i", "Type": "map<double,boolean>", "Comment": "map with information on foreign dominated industry knowing percentile .5, .75, .9, .95 of sales"}, {"Name": "dominated_capital_for_i", "Type": "map<double,boolean>", "Comment": "map with information on foreign dominated industry knowing percentile .5, .75, .9, .95 of capital"}], "partition_keys": ["geocode4_corr", "indu_2"], "metadata": {"DatabaseName": "firms_survey", "TableName": "asif_industry_characteristics_ownership", "target_S3URI": "s3://datalake-datascience/DATA/ECON/FIRM_SURVEY/ASIF_CHINA/TRANSFORMED/INDUSTRY_CHARACTERISTICS/OWNERSHIP", "from_athena": "True"}}, {"step": 3, "description": "\nTransform (creating time-break variables and fixed effect) asif_financial_ratio data and merging pollution, industry and city mandate tables\nwith financial ratio at the city level\n", "query": "\nCREATE TABLE environment.fin_dep_pollution_baseline_city WITH (format = 'PARQUET') AS WITH aggregate_pol AS (\nSELECT \n    year, \n    geocode4_corr, \n    provinces, \n    cityen, \n    ind2, \n    SUM(tso2) as tso2, \n    lower_location, \n    larger_location, \n    coastal \n  FROM \n    (\n      SELECT \n        year, \n        provinces, \n        citycode, \n        geocode4_corr, \n        china_city_sector_pollution.cityen, \n        ind2, \n        tso2, \n        lower_location, \n        larger_location, \n        coastal \n      FROM \n        environment.china_city_sector_pollution \n        INNER JOIN (\n          SELECT \n            extra_code, \n            geocode4_corr \n          FROM \n            chinese_lookup.china_city_code_normalised \n          GROUP BY \n            extra_code, \n            geocode4_corr\n        ) as no_dup_citycode ON china_city_sector_pollution.citycode = no_dup_citycode.extra_code\n    ) \n  GROUP BY \n    year, \n    provinces, \n    geocode4_corr, \n    cityen, \n    ind2, \n    lower_location, \n    larger_location, \n    coastal\n) \nSELECT \n  aggregate_pol.year, \n  CASE WHEN aggregate_pol.year in (\n    '2001', '2002', '2003', '2004', '2005'\n  ) THEN 'FALSE' WHEN aggregate_pol.year in ('2006', '2007') THEN 'TRUE' END AS period, \n  provinces, \n  cityen, \n  aggregate_pol.geocode4_corr, \n  CASE WHEN tcz IS NULL THEN '0' ELSE tcz END AS tcz, \n  CASE WHEN spz IS NULL OR spz = '#N/A' THEN '0' ELSE spz END AS spz, \n  aggregate_pol.ind2, \n  CASE WHEN short IS NULL THEN 'Unknown' ELSE short END AS short, \n  polluted_di, \n  polluted_mi, \n  polluted_mei, \n  tso2, \n  CAST(\n    tso2 AS DECIMAL(16, 5)\n  ) / CAST(\n    output AS DECIMAL(16, 5)\n  ) AS so2_intensity, \n  tso2_mandate_c,\n  above_threshold_mandate,\n  above_average_mandate,\n  in_10_000_tonnes, \n  CAST(\n    output AS DECIMAL(16, 5)\n  ) AS output, \n  CAST(\n    employment AS DECIMAL(16, 5)\n  ) AS employment, \n  CAST(\n    sales AS DECIMAL(16, 5)\n  ) AS sales, \n  CAST(\n    capital AS DECIMAL(16, 5)\n  ) AS capital, \n  CAST(\n    toasset AS DECIMAL(16, 5)\n  ) AS total_asset,\n  tfp_cit,\n  credit_constraint, \n  receivable_curasset_ci,\n  std_receivable_curasset_ci,\n  cash_over_curasset_ci,\n  std_cash_over_curasset_ci,\n  cash_over_totasset_ci,\n  std_cash_over_totasset_ci,\n  working_capital_ci,\n  std_working_capital_ci,\n  working_capital_requirement_ci,\n  std_working_capital_requirement_ci,\n  current_ratio_ci,\n  std_current_ratio_ci,\n  quick_ratio_ci,\n  std_quick_ratio_ci,\n  cash_ratio_ci,\n  std_cash_ratio_ci,\n  liabilities_assets_ci,\n  std_liabilities_assets_ci,\n  1 - liabilities_assets_ci as reverse_liabilities_assets_ci,\n  1-std_liabilities_assets_ci as reverse_std_liabilities_assets_ci,\n  sales_assets_andersen_ci,\n  std_sales_assets_andersen_ci,\n  return_on_asset_ci,\n  std_return_on_asset_ci,\n  sales_assets_ci,\n  std_sales_assets_ci,\n  account_paybable_to_asset_ci,\n  std_account_paybable_to_asset_ci,\n  asset_tangibility_ci,\n  std_asset_tangibility_ci,\n  rd_intensity_ci,\n  std_rd_intensity_ci,\n  inventory_to_sales_ci,\n  std_inventory_to_sales_ci,\n  lower_location, \n  larger_location, \n  coastal,\n  dominated_output_soe_c,\n  dominated_employment_soe_c,\n  dominated_sales_soe_c,\n  dominated_capital_soe_c,\n  dominated_output_for_c,\n  dominated_employment_for_c,\n  dominated_sales_for_c,\n  dominated_capital_for_c,  \n  dominated_output_i,\n  dominated_employ_i,\n  dominated_sales_i,\n  dominated_capital_i,\n  dominated_output_soe_i,\n  dominated_employment_soe_i,\n  dominated_sales_soe_i,\n  dominated_capital_soe_i,\n  dominated_output_for_i,\n  dominated_employment_for_i,\n  dominated_sales_for_i,\n  dominated_capital_for_i,  \n  DENSE_RANK() OVER (\n    ORDER BY \n      city_mandate.geocode4_corr, \n      aggregate_pol.ind2\n  ) AS fe_c_i, \n  DENSE_RANK() OVER (\n    ORDER BY \n      aggregate_pol.year, \n      aggregate_pol.ind2\n  ) AS fe_t_i, \n  DENSE_RANK() OVER (\n    ORDER BY \n      city_mandate.geocode4_corr, \n      aggregate_pol.year\n  ) AS fe_c_t \nFROM \n  aggregate_pol \n  INNER JOIN firms_survey.asif_industry_financial_ratio_city \n  ON aggregate_pol.ind2 = asif_industry_financial_ratio_city.indu_2 \n  AND aggregate_pol.geocode4_corr = asif_industry_financial_ratio_city.geocode4_corr \n  INNER JOIN (\n    SELECT \n  geocode4_corr, \n  tso2_mandate_c, \n  in_10_000_tonnes, \n  MAP(\n    ARRAY[.5, \n    .75, \n    .90, \n    .95 ], \n    zip_with(\n      transform(\n        sequence(1, 4), \n        x -> tso2_mandate_c\n      ), \n      tso2_mandate_c_pct, \n      (x, y) -> x < y\n    )\n  ) AS above_threshold_mandate, \n  CASE WHEN tso2_mandate_c > tso2_mandate_c_avg THEN 'ABOVE' ELSE 'BELOW' END AS above_average_mandate \nFROM \n  (\n    (\n      SELECT \n        'TEMP' as temp, \n        approx_percentile(\n          tso2_mandate_c, ARRAY[.5,.75,.90, \n          .95]\n        ) AS tso2_mandate_c_pct, \n        AVG(tso2_mandate_c) AS tso2_mandate_c_avg \n      FROM \n        policy.china_city_reduction_mandate\n    ) as percentile \n    LEFT JOIN (\n      SELECT \n        'TEMP' as temp, \n        citycn, \n        tso2_mandate_c, \n        in_10_000_tonnes \n      FROM \n        policy.china_city_reduction_mandate\n    ) as mandate ON percentile.temp = mandate.temp\n  ) as map_mandate\n  INNER JOIN chinese_lookup.china_city_code_normalised ON map_mandate.citycn = china_city_code_normalised.citycn \n    WHERE \n      extra_code = geocode4_corr\n  ) as city_mandate ON aggregate_pol.geocode4_corr = city_mandate.geocode4_corr \n  LEFT JOIN policy.china_city_tcz_spz ON aggregate_pol.geocode4_corr = china_city_tcz_spz.geocode4_corr \n  LEFT JOIN chinese_lookup.ind_cic_2_name ON aggregate_pol.ind2 = ind_cic_2_name.cic \n  LEFT JOIN (\n    SELECT \n      ind2, \n      polluted_di, \n      polluted_mi, \n      polluted_mei\n    FROM \n      \"environment\".\"china_sector_pollution_threshold\" \n    WHERE \n      year = '2001'\n  ) as polluted_sector ON aggregate_pol.ind2 = polluted_sector.ind2 \n  LEFT JOIN (\n    SELECT \n      cic, \n      financial_dep_china AS credit_constraint \n    FROM \n      industry.china_credit_constraint\n  ) as cred_constraint ON aggregate_pol.ind2 = cred_constraint.cic \n  LEFT JOIN (\n    SELECT \n      year, \n      geocode4_corr, \n      indu_2, \n      SUM(output) AS output, \n      SUM(employ) AS employment, \n      SUM(captal) AS capital,\n      SUM(sales) as sales,\n      SUM(toasset) as toasset,\n      AVG(tfp_op) as tfp_cit\n    FROM \n      (\n        SELECT \n      asif_city.firm, \n      tfp_op, \n      asif_city.year, \n      asif_city.geocode4_corr, \n      asif_city.indu_2, \n      asif_city.output,\n      asif_city.employ, \n      asif_city.captal, \n      asif_city.sales, \n      asif_city.toasset \n    FROM \n      firms_survey.asif_tfp_firm_level \n      RIGHT JOIN (\n        SELECT \n          firm, \n          year, \n          geocode4_corr, \n          CASE WHEN LENGTH(cic) = 4 THEN substr(cic, 1, 2) ELSE concat(\n            '0', \n            substr(cic, 1, 1)\n          ) END AS indu_2, \n          output, \n          employ, \n          captal, \n          sales, \n          toasset \n        FROM \n          firms_survey.asif_firms_prepared \n          INNER JOIN (\n            SELECT \n              extra_code, \n              geocode4_corr \n            FROM \n              chinese_lookup.china_city_code_normalised \n            GROUP BY \n              extra_code, \n              geocode4_corr\n          ) as no_dup_citycode ON asif_firms_prepared.citycode = no_dup_citycode.extra_code\n      ) as asif_city ON asif_tfp_firm_level.firm = asif_city.firm \n      and asif_tfp_firm_level.year = asif_city.year \n      and asif_tfp_firm_level.indu_2 = asif_city.indu_2 \n      and asif_tfp_firm_level.geocode4_corr = asif_city.geocode4_corr \n      ) \n    WHERE \n      year in (\n        '2001', '2002', '2003', '2004', '2005', \n        '2006', '2007'\n      ) \n    GROUP BY \n      geocode4_corr, \n      indu_2, \n      year\n  ) as agg_output ON aggregate_pol.geocode4_corr = agg_output.geocode4_corr \n  AND aggregate_pol.ind2 = agg_output.indu_2 \n  AND aggregate_pol.year = agg_output.year \n  \n  LEFT JOIN firms_survey.asif_industry_characteristics_ownership\n    ON aggregate_pol.geocode4_corr = asif_industry_characteristics_ownership.geocode4_corr\n    AND aggregate_pol.ind2 = asif_industry_characteristics_ownership.indu_2\n  LEFT JOIN firms_survey.asif_city_characteristics_ownership\n    ON aggregate_pol.geocode4_corr = asif_city_characteristics_ownership.geocode4_corr\n\nWHERE \n  tso2 > 4863 \n  AND output > 0 \n  and capital > 0 \n  and employment > 0\n  AND aggregate_pol.ind2 != '43'\n\n", "schema": [{"Name": "year", "Type": "string", "Comment": "year from 2001 to 2007"}, {"Name": "period", "Type": "varchar(5)", "Comment": "False if year before 2005 included, True if year 2006 and 2007"}, {"Name": "provinces", "Type": "string", "Comment": ""}, {"Name": "cityen", "Type": "string", "Comment": ""}, {"Name": "geocode4_corr", "Type": "string", "Comment": ""}, {"Name": "tcz", "Type": "string", "Comment": "Two control zone policy city"}, {"Name": "spz", "Type": "string", "Comment": "Special policy zone policy city"}, {"Name": "ind2", "Type": "string", "Comment": "2 digits industry"}, {"Name": "short", "Type": "string", "Comment": ""}, {"Name": "polluted_di", "Type": "varchar(5)", "Comment": "Sectors with values above Yearly 75th percentile of SO2 label as ABOVE else BELOW"}, {"Name": "polluted_mi", "Type": "varchar(5)", "Comment": "Sectors with values above Yearly average of SO2 label as ABOVE else BELOW"}, {"Name": "polluted_mei", "Type": "varchar(5)", "Comment": "Sectors with values above Yearly median of SO2 label as ABOVE else BELOW"}, {"Name": "tso2", "Type": "bigint", "Comment": "Total so2 city sector. Filtered values above  4863 (5% of the distribution)"}, {"Name": "so2_intensity", "Type": "decimal(21,5)", "Comment": "SO2 divided by output"}, {"Name": "tso2_mandate_c", "Type": "float", "Comment": "city reduction mandate in tonnes"}, {"Name": "above_threshold_mandate", "Type": "map<double,boolean>", "Comment": "Policy mandate above percentile .5, .75, .9, .95"}, {"Name": "above_average_mandate", "Type": "varchar(5)", "Comment": "Policy mandate above national average"}, {"Name": "in_10_000_tonnes", "Type": "float", "Comment": "city reduction mandate in 10k tonnes"}, {"Name": "output", "Type": "decimal(16,5)", "Comment": "Output"}, {"Name": "employment", "Type": "decimal(16,5)", "Comment": "Employemnt"}, {"Name": "sales", "Type": "decimal(16,5)", "Comment": "Sales"}, {"Name": "capital", "Type": "decimal(16,5)", "Comment": "Capital"}, {"Name": "total_asset", "Type": "decimal(16,5)", "Comment": "Total asset"}, {"Name": "tfp_cit", "Type": "double", "Comment": "TFP at the city industry level. From https://github.com/thomaspernet/Financial_dependency_pollution/blob/master/01_data_preprocessing/02_transform_tables/05_tfp_computation.md#table-asif_tfp_firm_level"}, {"Name": "credit_constraint", "Type": "float", "Comment": "Financial dependency. From paper https://www.sciencedirect.com/science/article/pii/S0147596715000311"}, {"Name": "receivable_curasset_ci", "Type": "double", "Comment": "\u5e94\u6536\u5e10\u6b3e (c80) / cuasset"}, {"Name": "std_receivable_curasset_ci", "Type": "double", "Comment": "standaridzed values (x - x mean) / std)"}, {"Name": "cash_over_curasset_ci", "Type": "double", "Comment": "1 - (\u5176\u4e2d\uff1a\u77ed\u671f\u6295\u8d44 (c79) - \u5e94\u6536\u5e10\u6b3e (c80) - \u5b58\u8d27 (c81) - \u5176\u4e2d\uff1a\u4ea7\u6210\u54c1 (c82)) /current asset"}, {"Name": "std_cash_over_curasset_ci", "Type": "double", "Comment": "standaridzed values (x - x mean) / std)"}, {"Name": "cash_over_totasset_ci", "Type": "double", "Comment": "1 - (cuasset- \u5176\u4e2d\uff1a\u77ed\u671f\u6295\u8d44 (c79) - \u5e94\u6536\u5e10\u6b3e (c80) - \u5b58\u8d27 (c81) - \u5176\u4e2d\uff1a\u4ea7\u6210\u54c1 (c82)) /toasset"}, {"Name": "std_cash_over_totasset_ci", "Type": "double", "Comment": "standaridzed values (x - x mean) / std)"}, {"Name": "working_capital_ci", "Type": "double", "Comment": "cuasset- \u6d41\u52a8\u8d1f\u503a\u5408\u8ba1 (c95)"}, {"Name": "std_working_capital_ci", "Type": "double", "Comment": "standaridzed values (x - x mean) / std)"}, {"Name": "working_capital_requirement_ci", "Type": "double", "Comment": "\u5b58\u8d27 (c81) + \u5e94\u6536\u5e10\u6b3e (c80) - \u5e94\u4ed8\u5e10\u6b3e  (c96)"}, {"Name": "std_working_capital_requirement_ci", "Type": "double", "Comment": "standaridzed values (x - x mean) / std)"}, {"Name": "current_ratio_ci", "Type": "double", "Comment": "cuasset/\u6d41\u52a8\u8d1f\u503a\u5408\u8ba1 (c95)"}, {"Name": "std_current_ratio_ci", "Type": "double", "Comment": "standaridzed values (x - x mean) / std)"}, {"Name": "quick_ratio_ci", "Type": "double", "Comment": "(cuasset-\u5b58\u8d27 (c81) ) / \u6d41\u52a8\u8d1f\u503a\u5408\u8ba1 (c95)"}, {"Name": "std_quick_ratio_ci", "Type": "double", "Comment": "standaridzed values (x - x mean) / std)"}, {"Name": "cash_ratio_ci", "Type": "double", "Comment": "1 - (cuasset -  \u5176\u4e2d\uff1a\u77ed\u671f\u6295\u8d44 (c79) - \u5e94\u6536\u5e10\u6b3e (c80) - \u5b58\u8d27 (c81)/ \u6d41\u52a8\u8d1f\u503a\u5408\u8ba1 (c95)"}, {"Name": "std_cash_ratio_ci", "Type": "double", "Comment": "standaridzed values (x - x mean) / std)"}, {"Name": "liabilities_assets_ci", "Type": "double", "Comment": "1- (\u6d41\u52a8\u8d1f\u503a\u5408\u8ba1 (c95) + \u957f\u671f\u8d1f\u503a\u5408\u8ba1 (c97)) / toasset"}, {"Name": "std_liabilities_assets_ci", "Type": "double", "Comment": "standaridzed values (x - x mean) / std)"}, {"Name": "reverse_liabilities_assets_ci", "Type": "double", "Comment": "1 - liabilities_assets_ci"}, {"Name": "reverse_std_liabilities_assets_ci", "Type": "double", "Comment": "1-standaridzed values (x - x mean) / std)"}, {"Name": "sales_assets_andersen_ci", "Type": "double", "Comment": "\u5168\u5e74\u8425\u4e1a\u6536\u5165\u5408\u8ba1 (c64) /(toasset)"}, {"Name": "std_sales_assets_andersen_ci", "Type": "double", "Comment": "standaridzed values (x - x mean) / std)"}, {"Name": "return_on_asset_ci", "Type": "double", "Comment": "sales - (\u4e3b\u8425\u4e1a\u52a1\u6210\u672c (c108) + \u8425\u4e1a\u8d39\u7528 (c113) + \u7ba1\u7406\u8d39\u7528 (c114) + \u8d22\u4ea7\u4fdd\u9669\u8d39 (c116) + \u52b3\u52a8\u3001\u5931\u4e1a\u4fdd\u9669\u8d39 (c118)+ \u8d22\u52a1\u8d39\u7528 (c124) + \u672c\u5e74\u5e94\u4ed8\u5de5\u8d44\u603b\u989d (wage)) /toasset"}, {"Name": "std_return_on_asset_ci", "Type": "double", "Comment": "standaridzed values (x - x mean) / std)"}, {"Name": "sales_assets_ci", "Type": "double", "Comment": "\u5168\u5e74\u8425\u4e1a\u6536\u5165\u5408\u8ba1 (c64) /(\\Delta toasset/2)"}, {"Name": "std_sales_assets_ci", "Type": "double", "Comment": "standaridzed values (x - x mean) / std)"}, {"Name": "account_paybable_to_asset_ci", "Type": "double", "Comment": "(\\Delta \u5e94\u4ed8\u5e10\u6b3e  (c96))/ (\\Delta (toasset))"}, {"Name": "std_account_paybable_to_asset_ci", "Type": "double", "Comment": "standaridzed values (x - x mean) / std)"}, {"Name": "asset_tangibility_ci", "Type": "double", "Comment": "Total fixed assets - Intangible assets"}, {"Name": "std_asset_tangibility_ci", "Type": "double", "Comment": "standaridzed values (x - x mean) / std)"}, {"Name": "rd_intensity_ci", "Type": "double", "Comment": "rdfee/\u5168\u5e74\u8425\u4e1a\u6536\u5165\u5408\u8ba1 (c64)"}, {"Name": "std_rd_intensity_ci", "Type": "double", "Comment": "standaridzed values (x - x mean) / std)"}, {"Name": "inventory_to_sales_ci", "Type": "double", "Comment": "\u5b58\u8d27 (c81) / sales"}, {"Name": "std_inventory_to_sales_ci", "Type": "double", "Comment": "standaridzed values (x - x mean) / std)"}, {"Name": "lower_location", "Type": "string", "Comment": "Location city. one of Coastal, Central, Northwest, Northeast, Southwest"}, {"Name": "larger_location", "Type": "string", "Comment": "Location city. one of Eastern, Central, Western"}, {"Name": "coastal", "Type": "string", "Comment": "City is bordered by sea or not"}, {"Name": "dominated_output_soe_c", "Type": "boolean", "Comment": "SOE dominated city of output. If true, then SOEs dominated city"}, {"Name": "dominated_employment_soe_c", "Type": "boolean", "Comment": "SOE dominated city of employment. If true, then SOEs dominated city"}, {"Name": "dominated_sales_soe_c", "Type": "boolean", "Comment": "SOE dominated city of sales. If true, then SOEs dominated city"}, {"Name": "dominated_capital_soe_c", "Type": "boolean", "Comment": "SOE dominated city of capital. If true, then SOEs dominated city"}, {"Name": "dominated_output_for_c", "Type": "boolean", "Comment": "foreign dominated city of output. If true, then foreign dominated city"}, {"Name": "dominated_employment_for_c", "Type": "boolean", "Comment": "foreign dominated city of employment. If true, then foreign dominated city"}, {"Name": "dominated_sales_for_c", "Type": "boolean", "Comment": "foreign dominated cityof sales. If true, then foreign dominated city"}, {"Name": "dominated_capital_for_c", "Type": "boolean", "Comment": "foreign dominated city of capital. If true, then foreign dominated city"}, {"Name": "dominated_output_i", "Type": "map<double,boolean>", "Comment": "map with information dominated industry knowing percentile .5, .75, .9, .95 of output"}, {"Name": "dominated_employment_i", "Type": "map<double,boolean>", "Comment": "map with information on dominated industry knowing percentile .5, .75, .9, .95 of employment"}, {"Name": "dominated_capital_i", "Type": "map<double,boolean>", "Comment": "map with information on dominated industry knowing percentile .5, .75, .9, .95 of capital"}, {"Name": "dominated_sales_i", "Type": "map<double,boolean>", "Comment": "map with information on SOE dominated industry knowing percentile .5, .75, .9, .95 of sales"}, {"Name": "dominated_output_soe_i", "Type": "map<double,boolean>", "Comment": "map with information on SOE dominated industry knowing percentile .5, .75, .9, .95 of output"}, {"Name": "dominated_employment_soe_i", "Type": "map<double,boolean>", "Comment": "map with information on SOE dominated industry knowing percentile .5, .75, .9, .95 of employment"}, {"Name": "dominated_sales_soe_i", "Type": "map<double,boolean>", "Comment": "map with information on SOE dominated industry knowing percentile .5, .75, .9, .95 of sales"}, {"Name": "dominated_capital_soe_i", "Type": "map<double,boolean>", "Comment": "map with information on SOE dominated industry knowing percentile .5, .75, .9, .95 of capital"}, {"Name": "dominated_output_for_i", "Type": "map<double,boolean>", "Comment": "map with information on foreign dominated industry knowing percentile .5, .75, .9, .95 of output"}, {"Name": "dominated_employment_for_i", "Type": "map<double,boolean>", "Comment": "map with information on foreign dominated industry knowing percentile .5, .75, .9, .95 of employment"}, {"Name": "dominated_sales_for_i", "Type": "map<double,boolean>", "Comment": "map with information on foreign dominated industry knowing percentile .5, .75, .9, .95 of sales"}, {"Name": "dominated_capital_for_i", "Type": "map<double,boolean>", "Comment": "map with information on foreign dominated industry knowing percentile .5, .75, .9, .95 of capital"}, {"Name": "fe_c_i", "Type": "bigint", "Comment": "City industry fixed effect"}, {"Name": "fe_t_i", "Type": "bigint", "Comment": "year industry fixed effect"}, {"Name": "fe_c_t", "Type": "bigint", "Comment": "city industry fixed effect"}], "partition_keys": ["geocode4_corr", "year", "ind2"], "metadata": {"DatabaseName": "environment", "TableName": "fin_dep_pollution_baseline_city", "target_S3URI": "s3://datalake-datascience/DATA/ENVIRONMENT/CHINA/FYP/FINANCIAL_CONTRAINT/PAPER_FYP_FINANCE_POL/BASELINE/CITY", "from_athena": "True"}}, {"step": 6, "description": "\nTransform asif tfp firm level and others data by merging asif firms prepared, china credit constraint, ind cic 2 name, china city code normalised, china tcz spz, china city reduction mandate data by constructing asset_tangibility, cash_over_total_asset, sales over asset Andersen method, current ratio (Compute proxy for credit constraint , Construct main variable asset tangibility) to asif tfp credit constraint\n", "query": "\nCREATE TABLE firms_survey.asif_tfp_credit_constraint WITH (format = 'PARQUET') AS\nWITH test AS (\n  SELECT \n    *, \n    CASE WHEN LENGTH(cic) = 4 THEN substr(cic, 1, 2) ELSE concat(\n      '0', \n      substr(cic, 1, 1)\n    ) END AS indu_2, \n    (cuasset + tofixed) - (c98 + c99) AS error, \n    CASE WHEN (cuasset + tofixed) - (c98 + c99) > 0 THEN (c98 + c99) + ABS(\n      (cuasset + tofixed) - (c98 + c99)\n    ) ELSE (c98 + c99) END AS total_liabilities, \n    CASE WHEN (cuasset + tofixed) - (c98 + c99) < 0 THEN (cuasset + tofixed) + ABS(\n      (cuasset + tofixed) - (c98 + c99)\n    ) ELSE (cuasset + tofixed) END AS total_asset, \n    CASE \n  WHEN c91 is NULL THEN c92 \n  WHEN c92 is NULL THEN c91\n  ELSE c91 + c92 END AS intangible,\n  CASE\n  WHEN c91 is NULL THEN tofixed - c92 \n  WHEN c92 is NULL THEN tofixed - c91\n  ELSE tofixed - (c91 + c92) END AS tangible, \n    CASE WHEN c79 IS NULL THEN cuasset - c80 - c81 - c82 ELSE cuasset - c79 - c80 - c81 - c82 END AS cash, \n    c131 + cudepre as cashflow, \n    CASE WHEN c79 IS NULL THEN 0 ELSE c79 END AS short_term_investment \n  FROM \n    firms_survey.asif_firms_prepared \n    INNER JOIN (\n      SELECT \n        extra_code, \n        geocode4_corr \n      FROM \n        chinese_lookup.china_city_code_normalised \n      GROUP BY \n        extra_code, \n        geocode4_corr\n    ) as no_dup_citycode ON asif_firms_prepared.citycode = no_dup_citycode.extra_code\n) \nSELECT \n  * \nFROM \n  (\n    WITH ratio AS (\n      SELECT \n        firm, \n        year, \n        cic, \n        indu_2, \n        geocode4_corr, \n        ownership, \n        CASE WHEN ownership = 'SOE' THEN 'SOE' ELSE 'PRIVATE' END AS soe_vs_pri, \n        CASE WHEN ownership in ('HTM', 'FOREIGN') THEN 'FOREIGN' ELSE 'DOMESTIC' END AS for_vs_dom, \n        CAST(\n          output AS DECIMAL(16, 5)\n        ) AS output, \n        CAST(\n          sales AS DECIMAL(16, 5)\n        ) AS sales, \n        CAST(\n          employ AS DECIMAL(16, 5)\n        ) AS employment, \n        CAST(\n          captal AS DECIMAL(16, 5)\n        ) AS capital, \n        cuasset, \n        tofixed, \n        error, \n        total_liabilities, \n        total_asset,\n        c91,\n        c92,\n        intangible, \n        tangible, \n        cash, \n        cashflow, \n        CAST(\n          cuasset AS DECIMAL(16, 5)\n        ) / NULLIF(\n          CAST(\n            c95 AS DECIMAL(16, 5)\n          ), \n          0\n        ) AS current_ratio, \n        CAST(\n          cuasset - short_term_investment - c80 - c81 AS DECIMAL(16, 5)\n        ) / NULLIF(\n          CAST(\n            c95 AS DECIMAL(16, 5)\n          ), \n          0\n        ) AS quick_ratio, \n        CAST(\n          c98 AS DECIMAL(16, 5)\n        ) / NULLIF(\n          CAST(\n            total_asset AS DECIMAL(16, 5)\n          ), \n          0\n        ) AS liabilities_tot_asset, \n        CAST(\n          sales AS DECIMAL(16, 5)\n        ) / NULLIF(\n          CAST(\n            total_asset AS DECIMAL(16, 5)\n          ), \n          0\n        ) AS sales_tot_asset, \n        CAST(\n          cash AS DECIMAL(16, 5)\n        ) / NULLIF(\n          CAST(\n            total_asset AS DECIMAL(16, 5)\n          ), \n          0\n        ) AS cash_tot_asset, \n        CAST(\n          c84 AS DECIMAL(16, 5)\n        ) / NULLIF(\n          CAST(\n            total_asset AS DECIMAL(16, 5)\n          ), \n          0\n        ) AS investment_tot_asset, \n        CAST(\n          rdfee AS DECIMAL(16, 5)\n        ) / NULLIF(\n          CAST(\n            total_asset AS DECIMAL(16, 5)\n          ), \n          0\n        ) AS rd_tot_asset, \n        CAST(\n          tangible AS DECIMAL(16, 5)\n        ) / NULLIF(\n          CAST(\n            total_asset AS DECIMAL(16, 5)\n          ), \n          0\n        ) asset_tangibility_tot_asset, \n        CAST(\n          cashflow AS DECIMAL(16, 5)\n        ) / NULLIF(\n          CAST(\n            total_asset AS DECIMAL(16, 5)\n          ), \n          0\n        ) AS cashflow_tot_asset, \n        CAST(\n          cashflow AS DECIMAL(16, 5)\n        ) / NULLIF(\n          CAST(\n            tangible AS DECIMAL(16, 5)\n          ), \n          0\n        ) AS cashflow_to_tangible,\n        'FAKE' AS fake \n      FROM \n        test \n      WHERE \n        year in (\n          '2000', '2001', '2002', '2003', '2004', \n          '2005', '2006', '2007'\n        )\n    ) \n    SELECT \n      ratio.firm, \n      ratio.year, \n      CASE WHEN ratio.year in (\n        '2001', '2002', '2003', '2004', '2005'\n      ) THEN 'FALSE' WHEN ratio.year in ('2006', '2007') THEN 'TRUE' END AS period, \n      ratio.cic, \n      ratio.indu_2, \n      CASE WHEN short IS NULL THEN 'Unknown' ELSE short END AS short, \n      ratio.geocode4_corr, \n      CASE WHEN tcz IS NULL THEN '0' ELSE tcz END AS tcz, \n      CASE WHEN spz IS NULL \n      OR spz = '#N/A' THEN '0' ELSE spz END AS spz, \n      ratio.ownership, \n      soe_vs_pri, \n      for_vs_dom, \n      tso2_mandate_c, \n      in_10_000_tonnes, \n      ratio.output, \n      ratio.employment, \n      ratio.capital, \n      cuasset, \n      tofixed, \n      error, \n      total_liabilities, \n      total_asset, \n      intangible, \n      tangible,\n      c91,\n      c92,\n      cash, \n      cashflow, \n      sales, \n      tfp_op, \n      credit_constraint, \n      current_ratio, \n      quick_ratio, \n      liabilities_tot_asset, \n      sales_tot_asset, \n      cash_tot_asset, \n      investment_tot_asset, \n      rd_tot_asset, \n      asset_tangibility_tot_asset, \n      cashflow_tot_asset, \n      cashflow_to_tangible, \n      CASE WHEN avg_asset_tangibility_f > avg_asset_tangibility_ci THEN 'LARGE' ELSE 'SMALL' END AS avg_size_asset_fci, \n      CASE WHEN avg_output_f > avg_output_ci THEN 'LARGE' ELSE 'SMALL' END AS avg_size_output_fci, \n      CASE WHEN avg_employment_f > avg_employment_ci THEN 'LARGE' ELSE 'SMALL' END AS avg_employment_fci, \n      CASE WHEN avg_capital_f > avg_capital_ci THEN 'LARGE' ELSE 'SMALL' END AS avg_size_capital_fci, \n      CASE WHEN avg_sales_f > avg_sales_ci THEN 'LARGE' ELSE 'SMALL' END AS avg_sales_fci, \n      MAP(\n        ARRAY[.5, \n        .75, \n        .90, \n        .95 ], \n        zip_with(\n          transform(\n            sequence(1, 4), \n            x -> avg_asset_tangibility_f\n          ), \n          pct_asset_tangibility_ci, \n          (x, y) -> x > y\n        )\n      ) AS size_asset_fci,\n      MAP(\n        ARRAY[.5, \n        .75, \n        .90, \n        .95 ], \n        zip_with(\n          transform(\n            sequence(1, 4), \n            x -> avg_asset_tangibility_f\n          ), \n          pct_asset_tangibility_c, \n          (x, y) -> x > y\n        )\n      ) AS size_asset_fc, \n      MAP(\n        ARRAY[.5, \n        .75, \n        .90, \n        .95 ], \n        zip_with(\n          transform(\n            sequence(1, 4), \n            x -> avg_asset_tangibility_f\n          ), \n          pct_asset_tangibility_i, \n          (x, y) -> x > y\n        )\n      ) AS size_asset_fi,\n      MAP(\n        ARRAY[.5, \n        .75, \n        .90, \n        .95 ], \n        zip_with(\n          transform(\n            sequence(1, 4), \n            x -> avg_output_f\n          ), \n          pct_output_ci, \n          (x, y) -> x > y\n        )\n      ) AS size_output_fci,\n      MAP(\n        ARRAY[.5, \n        .75, \n        .90, \n        .95 ], \n        zip_with(\n          transform(\n            sequence(1, 4), \n            x -> avg_output_f\n          ), \n          pct_output_c, \n          (x, y) -> x > y\n        )\n      ) AS size_output_fc,\n      MAP(\n        ARRAY[.5, \n        .75, \n        .90, \n        .95 ], \n        zip_with(\n          transform(\n            sequence(1, 4), \n            x -> avg_output_f\n          ), \n          pct_output_i, \n          (x, y) -> x > y\n        )\n      ) AS size_output_fi,\n      MAP(\n        ARRAY[.5, \n        .75, \n        .90, \n        .95 ], \n        zip_with(\n          transform(\n            sequence(1, 4), \n            x -> avg_employment_f\n          ), \n          pct_employment_ci, \n          (x, y) -> x > y\n        )\n      ) AS size_employment_fci, \n      MAP(\n        ARRAY[.5, \n        .75, \n        .90, \n        .95 ], \n        zip_with(\n          transform(\n            sequence(1, 4), \n            x -> avg_employment_f\n          ), \n          pct_employment_c, \n          (x, y) -> x > y\n        )\n      ) AS size_employment_fc, \n      MAP(\n        ARRAY[.5, \n        .75, \n        .90, \n        .95 ], \n        zip_with(\n          transform(\n            sequence(1, 4), \n            x -> avg_employment_f\n          ), \n          pct_employment_i, \n          (x, y) -> x > y\n        )\n      ) AS size_employment_fi, \n      MAP(\n        ARRAY[.5, \n        .75, \n        .90, \n        .95 ], \n        zip_with(\n          transform(\n            sequence(1, 4), \n            x -> avg_capital_f\n          ), \n          pct_capital_ci, \n          (x, y) -> x > y\n        )\n      ) AS size_capital_fci, \n      MAP(\n        ARRAY[.5, \n        .75, \n        .90, \n        .95 ], \n        zip_with(\n          transform(\n            sequence(1, 4), \n            x -> avg_capital_f\n          ), \n          pct_capital_c, \n          (x, y) -> x > y\n        )\n      ) AS size_capital_fc, \n      MAP(\n        ARRAY[.5, \n        .75, \n        .90, \n        .95 ], \n        zip_with(\n          transform(\n            sequence(1, 4), \n            x -> avg_capital_f\n          ), \n          pct_capital_i, \n          (x, y) -> x > y\n        )\n      ) AS size_capital_fi, \n      MAP(\n        ARRAY[.5, \n        .75, \n        .90, \n        .95 ], \n        zip_with(\n          transform(\n            sequence(1, 4), \n            x -> avg_sales_f\n          ), \n          pct_sales_ci, \n          (x, y) -> x > y\n        )\n      ) AS size_sales_fci, \n      MAP(\n        ARRAY[.5, \n        .75, \n        .90, \n        .95 ], \n        zip_with(\n          transform(\n            sequence(1, 4), \n            x -> avg_sales_f\n          ), \n          pct_sales_c, \n          (x, y) -> x > y\n        )\n      ) AS size_sales_fc,\n      MAP(\n        ARRAY[.5, \n        .75, \n        .90, \n        .95 ], \n        zip_with(\n          transform(\n            sequence(1, 4), \n            x -> avg_sales_f\n          ), \n          pct_sales_i, \n          (x, y) -> x > y\n        )\n      ) AS size_sales_fi,\n      count_ownership,\n      count_city,\n      count_industry,\n      DENSE_RANK() OVER (\n        ORDER BY \n          ratio.geocode4_corr, \n          ratio.cic\n      ) AS fe_c_i, \n      DENSE_RANK() OVER (\n        ORDER BY \n          ratio.year, \n          ratio.cic\n      ) AS fe_t_i, \n      DENSE_RANK() OVER (\n        ORDER BY \n          ratio.geocode4_corr, \n          ratio.year\n      ) AS fe_c_t \n    FROM \n      ratio \n      INNER JOIN (\n        SELECT \n          year, \n          geocode4_corr, \n          provinces, \n          cityen, \n          indus_code AS cic, \n          SUM(tso2) as tso2, \n          lower_location, \n          larger_location, \n          coastal \n        FROM \n          (\n            SELECT \n              year, \n              provinces, \n              citycode, \n              geocode4_corr, \n              china_city_sector_pollution.cityen, \n              indus_code, \n              tso2, \n              lower_location, \n              larger_location, \n              coastal \n            FROM \n              environment.china_city_sector_pollution \n              INNER JOIN (\n                SELECT \n                  extra_code, \n                  geocode4_corr \n                FROM \n                  chinese_lookup.china_city_code_normalised \n                GROUP BY \n                  extra_code, \n                  geocode4_corr\n              ) as no_dup_citycode ON china_city_sector_pollution.citycode = no_dup_citycode.extra_code\n          ) \n        GROUP BY \n          year, \n          provinces, \n          geocode4_corr, \n          cityen, \n          indus_code, \n          lower_location, \n          larger_location, \n          coastal\n      ) as aggregate_pol ON ratio.year = aggregate_pol.year \n      AND ratio.geocode4_corr = aggregate_pol.geocode4_corr \n      AND ratio.cic = aggregate_pol.cic \n      INNER JOIN (\n        SELECT \n          geocode4_corr, \n          tso2_mandate_c, \n          in_10_000_tonnes \n        FROM \n          policy.china_city_reduction_mandate \n          INNER JOIN chinese_lookup.china_city_code_normalised ON china_city_reduction_mandate.citycn = china_city_code_normalised.citycn \n        WHERE \n          extra_code = geocode4_corr\n      ) as city_mandate ON ratio.geocode4_corr = city_mandate.geocode4_corr \n      LEFT JOIN policy.china_city_tcz_spz ON ratio.geocode4_corr = china_city_tcz_spz.geocode4_corr \n      LEFT JOIN chinese_lookup.ind_cic_2_name ON ratio.indu_2 = ind_cic_2_name.cic \n      LEFT JOIN (\n        SELECT \n          cic, \n          financial_dep_china AS credit_constraint, \n          CASE WHEN financial_dep_china > -.47 THEN 'ABOVE' ELSE 'BELOW' END AS d_credit_constraint \n        FROM \n          industry.china_credit_constraint\n      ) as cred_constraint ON ratio.indu_2 = cred_constraint.cic \n      LEFT JOIN (\n        SELECT \n          -- fake, \n          geocode4_corr, \n          indu_2,\n          approx_percentile(\n            avg_asset_tangibility_f, ARRAY[.5, \n            .75,.90,.95]\n          ) as pct_asset_tangibility_ci, \n          AVG(avg_asset_tangibility_f) AS avg_asset_tangibility_ci, \n          approx_percentile(\n            avg_output_f, ARRAY[.5,.75,.90,.95]\n          ) as pct_output_ci, \n          AVG(avg_output_f) AS avg_output_ci, \n          approx_percentile(\n            avg_employment_f, ARRAY[.5,.75,.90, \n            .95]\n          ) as pct_employment_ci, \n          AVG(avg_employment_f) AS avg_employment_ci, \n          approx_percentile(\n            avg_capital_f, ARRAY[.5,.75,.90, \n            .95]\n          ) as pct_capital_ci, \n          AVG(avg_capital_f) AS avg_capital_ci, \n          approx_percentile(\n            avg_sales_f, ARRAY[.5,.75,.90,.95]\n          ) as pct_sales_ci, \n          AVG(avg_sales_f) AS avg_sales_ci \n        FROM \n          (\n            SELECT \n              firm, \n              geocode4_corr,\n              indu_2,\n              -- fake, \n              AVG(tangible) as avg_asset_tangibility_f, \n              AVG(output) as avg_output_f, \n              AVG(employment) as avg_employment_f, \n              AVG(capital) as avg_capital_f, \n              AVG(sales) as avg_sales_f \n            FROM \n              ratio \n            GROUP BY \n              -- fake, \n              firm,\n              geocode4_corr,\n              indu_2\n          ) \n        GROUP BY \n          -- fake\n          geocode4_corr, \n          indu_2\n      ) as pct_ci ON ratio.geocode4_corr = pct_ci.geocode4_corr \n    AND ratio.indu_2 = pct_ci.indu_2\n    LEFT JOIN (\n        SELECT \n          -- fake, \n          geocode4_corr, \n          approx_percentile(\n            avg_asset_tangibility_f, ARRAY[.5, \n            .75,.90,.95]\n          ) as pct_asset_tangibility_c, \n          AVG(avg_asset_tangibility_f) AS avg_asset_tangibility_c, \n          approx_percentile(\n            avg_output_f, ARRAY[.5,.75,.90,.95]\n          ) as pct_output_c, \n          AVG(avg_output_f) AS avg_output_c, \n          approx_percentile(\n            avg_employment_f, ARRAY[.5,.75,.90, \n            .95]\n          ) as pct_employment_c, \n          AVG(avg_employment_f) AS avg_employment_c, \n          approx_percentile(\n            avg_capital_f, ARRAY[.5,.75,.90, \n            .95]\n          ) as pct_capital_c, \n          AVG(avg_capital_f) AS avg_capital_c, \n          approx_percentile(\n            avg_sales_f, ARRAY[.5,.75,.90,.95]\n          ) as pct_sales_c, \n          AVG(avg_sales_f) AS avg_sales_c\n        FROM \n          (\n            SELECT \n              firm, \n              geocode4_corr,\n              -- fake, \n              AVG(tangible) as avg_asset_tangibility_f, \n              AVG(output) as avg_output_f, \n              AVG(employment) as avg_employment_f, \n              AVG(capital) as avg_capital_f, \n              AVG(sales) as avg_sales_f \n            FROM \n              ratio \n            GROUP BY \n              -- fake, \n              firm,\n              geocode4_corr\n          ) \n        GROUP BY \n          -- fake\n          geocode4_corr\n      ) as pct_c ON ratio.geocode4_corr = pct_c.geocode4_corr\n      LEFT JOIN (\n        SELECT \n          -- fake, \n          indu_2, \n          approx_percentile(\n            avg_asset_tangibility_f, ARRAY[.5, \n            .75,.90,.95]\n          ) as pct_asset_tangibility_i, \n          AVG(avg_asset_tangibility_f) AS avg_asset_tangibility_i, \n          approx_percentile(\n            avg_output_f, ARRAY[.5,.75,.90,.95]\n          ) as pct_output_i, \n          AVG(avg_output_f) AS avg_output_i, \n          approx_percentile(\n            avg_employment_f, ARRAY[.5,.75,.90, \n            .95]\n          ) as pct_employment_i, \n          AVG(avg_employment_f) AS avg_employment_i, \n          approx_percentile(\n            avg_capital_f, ARRAY[.5,.75,.90, \n            .95]\n          ) as pct_capital_i, \n          AVG(avg_capital_f) AS avg_capital_i, \n          approx_percentile(\n            avg_sales_f, ARRAY[.5,.75,.90,.95]\n          ) as pct_sales_i, \n          AVG(avg_sales_f) AS avg_sales_i\n        FROM \n          (\n            SELECT \n              firm, \n              indu_2,\n              -- fake, \n              AVG(tangible) as avg_asset_tangibility_f, \n              AVG(output) as avg_output_f, \n              AVG(employment) as avg_employment_f, \n              AVG(capital) as avg_capital_f, \n              AVG(sales) as avg_sales_f \n            FROM \n              ratio \n            GROUP BY \n              -- fake, \n              firm,\n              indu_2\n          ) \n        GROUP BY \n          -- fake\n          indu_2\n      ) as pct_i ON ratio.indu_2 = pct_i.indu_2 \n      INNER JOIN (\n        SELECT \n          firm, \n          -- fake, \n          AVG(tangible) as avg_asset_tangibility_f,\n          AVG(output) as avg_output_f, \n          AVG(employment) as avg_employment_f, \n          AVG(capital) as avg_capital_f, \n          AVG(sales) as avg_sales_f\n        FROM \n          ratio \n        GROUP BY \n          -- fake, \n          firm\n      ) as firm_avg ON ratio.firm = firm_avg.firm\n    INNER JOIN firms_survey.asif_tfp_firm_level on \n      ratio.firm = asif_tfp_firm_level.firm \n      AND ratio.year = asif_tfp_firm_level.year\n      AND ratio.geocode4_corr = asif_tfp_firm_level.geocode4_corr\n      AND ratio.ownership = asif_tfp_firm_level.ownership\n    -- WHERE \n    --  count_ownership = '1' \n    --  AND count_city = '1' \n    --  AND count_industry = '1' \n      AND ratio.output > 0 \n      and ratio.capital > 0 \n      and ratio.employment > 0 \n      AND ratio.indu_2 != '43' \n      AND total_asset > 0 \n      AND tangible > 0\n      AND quick_ratio > 0\n      AND current_ratio > 0\n      AND liabilities_tot_asset > 0\n      AND sales_tot_asset > 0\n      AND cash_tot_asset > 0\n      AND cashflow_tot_asset > 0\n      \n    --  AND ratio.year in (\n    --    '2001', '2002', '2003', '2004', '2005', \n    --    '2006', '2007'\n    --  ) \n    ORDER BY \n      year \n  )\n", "schema": [{"Name": "firm", "Type": "string", "Comment": "firm ID"}, {"Name": "year", "Type": "string", "Comment": "year"}, {"Name": "period", "Type": "varchar(5)", "Comment": "if year prior to 2006 then False else true. Indicate break from 10 and 11 FYP"}, {"Name": "cic", "Type": "string", "Comment": "4 digits industry code"}, {"Name": "indu_2", "Type": "string", "Comment": "Two digits industry. If length cic equals to 3, then add 0 to indu_2"}, {"Name": "short", "Type": "string", "Comment": "Industry short description"}, {"Name": "geocode4_corr", "Type": "string", "Comment": "city code"}, {"Name": "tcz", "Type": "string", "Comment": "Two control zone policy"}, {"Name": "spz", "Type": "string", "Comment": "Special policy zone"}, {"Name": "ownership", "Type": "string", "Comment": "Firms ownership"}, {"Name": "soe_vs_pri", "Type": "varchar(7)", "Comment": "SOE vs PRIVATE"}, {"Name": "for_vs_dom", "Type": "varchar(8)", "Comment": "FOREIGN vs DOMESTICT if ownership is HTM then FOREIGN"}, {"Name": "tso2_mandate_c", "Type": "float", "Comment": "city reduction mandate in tonnes"}, {"Name": "in_10_000_tonnes", "Type": "float", "Comment": "city reduction mandate in 10k tonnes"}, {"Name": "output", "Type": "decimal(16,5)", "Comment": "Output"}, {"Name": "employment", "Type": "decimal(16,5)", "Comment": "employment"}, {"Name": "capital", "Type": "decimal(16,5)", "Comment": "capital"}, {"Name": "cuasset", "Type": "int", "Comment": "current asset"}, {"Name": "tofixed", "Type": "int", "Comment": "total fixed asset"}, {"Name": "error", "Type": "int", "Comment": "difference between cuasset+tofixed and total liabilities +equity. Error makes the balance sheet equation right"}, {"Name": "total_liabilities", "Type": "int", "Comment": "total adjusted liabilities"}, {"Name": "total_asset", "Type": "int", "Comment": "total adjusted asset"}, {"Name": "intangible", "Type": "int", "Comment": "intangible asset measured as the sum of intangibles variables"}, {"Name": "tangible", "Type": "int", "Comment": "tangible asset measured as the difference between total fixed asset minus intangible asset"}, {"Name": "c91", "Type": "int", "Comment": "Intangible and Deferred"}, {"Name": "c92", "Type": "int", "Comment": "Intangible assets"}, {"Name": "cash", "Type": "int", "Comment": "cash "}, {"Name": "cashflow", "Type": "int", "Comment": "cash flow"}, {"Name": "sales", "Type": "decimal(16,5)", "Comment": "sales"}, {"Name": "tfp_op", "Type": "double", "Comment": "TFP. Computed from https://github.com/thomaspernet/Financial_dependency_pollution/blob/master/01_data_preprocessing/02_transform_tables/05_tfp_computation.md"}, {"Name": "credit_constraint", "Type": "float", "Comment": "Financial dependency. From paper https://www.sciencedirect.com/science/article/pii/S0147596715000311"}, {"Name": "current_ratio", "Type": "decimal(21,5)", "Comment": "current ratio cuasset/\u6d41\u52a8\u8d1f\u503a\u5408\u8ba1 (c95)"}, {"Name": "quick_ratio", "Type": "decimal(21,5)", "Comment": "quick ratio (cuasset-\u5b58\u8d27 (c81) ) / \u6d41\u52a8\u8d1f\u503a\u5408\u8ba1 (c95)"}, {"Name": "liabilities_tot_asset", "Type": "decimal(21,5)", "Comment": "liabilities to total asset"}, {"Name": "sales_tot_asset", "Type": "decimal(21,5)", "Comment": "sales to total asset"}, {"Name": "cash_tot_asset", "Type": "decimal(21,5)", "Comment": "cash to total asset"}, {"Name": "investment_tot_asset", "Type": "decimal(21,5)", "Comment": "investment to total asset"}, {"Name": "rd_tot_asset", "Type": "decimal(21,5)", "Comment": "rd to total asset"}, {"Name": "asset_tangibility_tot_asset", "Type": "decimal(21,5)", "Comment": "asset tangibility to total asset"}, {"Name": "cashflow_tot_asset", "Type": "decimal(21,5)", "Comment": "cashflow to total asset"}, {"Name": "cashflow_to_tangible", "Type": "decimal(21,5)", "Comment": "cashflow to tangible asset"}, {"Name": "avg_size_asset_f", "Type": "varchar(5)", "Comment": "if firm s asset tangibility average is above average of firm s average then firm is large"}, {"Name": "avg_size_output_f", "Type": "varchar(5)", "Comment": "if firm s ouptut average is above average of firm s average then firm is large"}, {"Name": "avg_employment_f", "Type": "varchar(5)", "Comment": "if firm s employment average is above average of firm s average then firm is large"}, {"Name": "avg_size_capital_f", "Type": "varchar(5)", "Comment": "if firm s capital average is above average of firm s average then firm is large"}, {"Name": "avg_sales_f", "Type": "varchar(5)", "Comment": "if firm s sale is above average of firm s average then firm is large"}, {"Name": "size_asset_fci", "Type": "map<double,boolean>", "Comment": "if firm s asset tangibility average is above average of firm city industry s decile then firm is large"}, {"Name": "size_asset_fc", "Type": "map<double,boolean>", "Comment": "if firm s asset tangibility average is above average of firm s city decile then firm is large"}, {"Name": "size_asset_fi", "Type": "map<double,boolean>", "Comment": "if firm s asset tangibility average is above average of firm s industry decile then firm is large"}, {"Name": "size_output_fci", "Type": "map<double,boolean>", "Comment": "if firm s ouptut average is above average of firm s city industry decile then firm is large"}, {"Name": "size_output_fc", "Type": "map<double,boolean>", "Comment": "if firm s ouptut average is above average of firm s city decile then firm is large"}, {"Name": "size_output_fi", "Type": "map<double,boolean>", "Comment": "if firm s ouptut average is above average of firm s industry decile then firm is large"}, {"Name": "size_employment_fci", "Type": "map<double,boolean>", "Comment": "if firm s employment average is above average of firm s city industry decile then firm is large"}, {"Name": "size_employment_fc", "Type": "map<double,boolean>", "Comment": "if firm s employment average is above average of firm s city decile then firm is large"}, {"Name": "size_employment_fi", "Type": "map<double,boolean>", "Comment": "if firm s employment average is above average of firm s industry decile then firm is large"}, {"Name": "size_capital_fci", "Type": "map<double,boolean>", "Comment": "if firm s capital average is above average of firm s city industry decile then firm is large"}, {"Name": "size_capital_fc", "Type": "map<double,boolean>", "Comment": "if firm s capital average is above average of firm s city decile then firm is large"}, {"Name": "size_capital_fi", "Type": "map<double,boolean>", "Comment": "if firm s capital average is above average of firm s industry decile then firm is large"}, {"Name": "size_sales_fci", "Type": "map<double,boolean>", "Comment": "if firm s sale is above average of firm s city industry decile then firm is large"}, {"Name": "size_sales_fc", "Type": "map<double,boolean>", "Comment": "if firm s sale is above average of firm s city decile then firm is large"}, {"Name": "size_sales_fi", "Type": "map<double,boolean>", "Comment": "if firm s sale is above average of firm s industry decile then firm is large"}, {"Name": "fe_c_i", "Type": "bigint", "Comment": "City industry fixed effect"}, {"Name": "fe_t_i", "Type": "bigint", "Comment": "year industry fixed effect"}, {"Name": "fe_c_t", "Type": "bigint", "Comment": "city industry fixed effect"}], "partition_keys": ["firm", "year", "cic", "geocode4_corr"], "metadata": {"DatabaseName": "firms_survey", "TableName": "asif_tfp_credit_constraint", "target_S3URI": "s3://datalake-datascience/DATA/ECON/FIRM_SURVEY/ASIF_CHINA/TRANSFORMED/TFP/CREDIT_CONSTRAINT", "from_athena": "True"}}]}}, "ANALYSIS": {"COUNT_MISSING": {"top": "SELECT COUNT(*) as nb_obs, ", "middle": "COUNT(*) - COUNT({0}) AS {0}", "bottom": " FROM {}.{}"}, "CATEGORICAL": {"PAIR": "SELECT {2}, COUNT(*) AS nb_obs FROM {0}.{1} GROUP BY {2} ORDER BY nb_obs DESC ", "MULTI_PAIR": "SELECT {2}, {3}, COUNT(*) AS nb_obs FROM {0}.{1} GROUP BY {2}, {3} ORDER BY nb_obs DESC "}, "CONTINUOUS": {"DISTRIBUTION": {"top_1": "SELECT * FROM (WITH table_wrapper AS (", "top_2": ") SELECT table_wrapper.pct,", "top_3": " FROM table_wrapper ", "middle_1": "  LEFT JOIN ( ", "middle_2": " ) as table_2_{0} ON table_wrapper.pct = table_2_{0}.pct ", "bottom": "WITH table_{3} AS ( SELECT MAP( ARRAY[0.25, 0.50, 0.75, 0.95, 0.99], approx_percentile( {2}, ARRAY[0.25, 0.50, 0.75, 0.95, 0.99] ) ) as nest FROM {0}.{1} ) SELECT pct, value AS {2} FROM table_{3} CROSS JOIN UNNEST(nest) AS t(pct, value)"}, "ONE_PAIR_DISTRIBUTION": {"top_1": "SELECT * FROM (WITH table_wrapper AS (", "top_2": ") SELECT table_wrapper.pct, table_wrapper.{}, ", "top_3": " FROM table_wrapper ", "middle_1": "  LEFT JOIN ( ", "middle_2": " ) as table_2_{0} ON table_wrapper.{1} = table_2_{0}.{1} AND table_wrapper.pct = table_2_{0}.pct ", "bottom": "WITH table_{3} AS ( SELECT {4}, MAP(ARRAY[0.25, 0.50, 0.75, 0.95, 0.99], approx_percentile( {2}, ARRAY[0.25, 0.50, 0.75, 0.95, 0.99] ) ) as nest FROM {0}.{1} GROUP BY {4}) SELECT {4}, pct, value AS {2} FROM table_{3} CROSS JOIN UNNEST(nest) AS t(pct, value)"}, "TWO_PAIRS_DISTRIBUTION": "WITH dataset AS ( SELECT {2}, {3}, MAP( ARRAY[0.25, 0.50, 0.75, 0.95, 0.99], approx_percentile( {4}, ARRAY[0.25, 0.50, 0.75, 0.95, 0.99] ) ) as nest FROM {0}.{1} GROUP BY {2}, {3} ) SELECT {2}, {3}, pct, value AS {4} FROM dataset CROSS JOIN UNNEST(nest) AS t(pct, value)"}, "COUNT_DUPLICATES": {"query": "SELECT CNT, COUNT(*) AS CNT_DUPLICATE FROM ( SELECT {2}, COUNT(*) as CNT FROM {0}.{1} GROUP BY {2} ) GROUP BY CNT ORDER BY CNT_DUPLICATE"}}}